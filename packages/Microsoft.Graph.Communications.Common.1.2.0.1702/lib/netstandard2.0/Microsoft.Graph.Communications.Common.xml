<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Graph.Communications.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Graph.Communications.Common.AutoClean">
            <summary>
            Helper class to automatically cleanup.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.AutoClean.cleanup">
            <summary>
            Gets or sets the cleanup action.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.AutoClean.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.AutoClean"/> class.
            </summary>
            <param name="action">Cleanup action.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.AutoClean.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.AutoClean`1">
            <summary>
            Helper class to automatically cleanup but with associated state.
            </summary>
            <typeparam name="T">State type.</typeparam>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.AutoClean`1.#ctor(`0,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.AutoClean`1"/> class.
            </summary>
            <param name="t">Instance of the custom data.</param>
            <param name="action">Cleanup action.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.AutoClean`1.Data">
            <summary>
            Gets the custom data.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Disposable">
            <summary>
            Common disposable pattern
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Disposable.disposed">
            <summary>
            Flag to avoid multiple dispose calls.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Disposable.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Microsoft.Graph.Communications.Common.Disposable"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Disposable.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
              <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Disposable.Dispose">
            <summary>
            Dispose resources.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Disposable.Dispose(System.Boolean)">
            <summary>
            Protected implementation of dispose.
            This will be triggered only once regardless if manually disposed or garbage collected.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Disposable.IsFirstTimeDisposing">
            <summary>
            Allow only one dispose call to happen.
            </summary>
            <returns>True if first time disposing</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Extensions">
            <summary>
            Defines Extensions.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.Read(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Automatic cleanup of entering read lock.
            </summary>
            <param name="lockSlim">Lock instance.</param>
            <returns>Disposable cleanup instance.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.UpgradeableRead(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Automatic cleanup of entering read lock.
            </summary>
            <param name="lockSlim">Lock instance.</param>
            <returns>Disposable cleanup instance.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.Write(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Automatic cleanup of entering write lock.
            </summary>
            <param name="lockSlim">Lock instance.</param>
            <returns>Disposable cleanup instance.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.Lock(System.Threading.Mutex)">
            <summary>
            Lock mutex
            </summary>
            <param name="mutex">Mutex to enter.</param>
            <returns>Disposable cleanup to release mutex.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.SafeWaitAsync(System.Threading.SemaphoreSlim)">
            <summary>
            Safe wait on semaphore
            </summary>
            <param name="semaphoreSlim">The semaphore to wait on.</param>
            <returns>Disposable cleanup to release semaphore.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.SafeWait(System.Threading.SemaphoreSlim)">
            <summary>
            Safe wait on semaphore
            </summary>
            <param name="semaphoreSlim">The semaphore to wait on.</param>
            <returns>Disposable cleanup to release semaphore.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.PushDir(System.String)">
            <summary>
            Push directory and restore when done.
            </summary>
            <param name="directory">New directory to change to.</param>
            <returns>Disposable to restore to previous directory.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.Pin(System.Object)">
            <summary>
            Pin object memory.
            </summary>
            <param name="obj">Object to pin.</param>
            <returns>Disposable cleanup to release pinned memory.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an object of the specified type and whose value is equivalent to the specified object.
            </summary>
            <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface. </param>
            <param name="conversionType">The type of object to return. </param>
            <returns>Converted object</returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported.  -or-<paramref name="value" /> is null and <paramref name="conversionType" /> is a value conversionType.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
            <exception cref="T:System.FormatException">
            <paramref name="value" /> is not in a format recognized by <paramref name="conversionType" />.</exception>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> represents a number that is out of the range of <paramref name="conversionType" />.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="conversionType" /> is null.</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.ChangeType``1(System.Object)">
            <summary>
            Convert conversionType of an object
            </summary>
            <typeparam name="T">Type requested</typeparam>
            <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface. </param>
            <returns>Converted object</returns>
            <exception cref="T:System.InvalidCastException">This conversion is not supported.  -or-<paramref name="value" /> is null and <typeref name="T" /> is a value conversionType.-or-<paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
            <exception cref="T:System.FormatException">
            <paramref name="value" /> is not in a format recognized by <typeref name="T" />.</exception>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> represents a number that is out of the range of <typeref name="T" />.</exception>
            <exception cref="T:System.ArgumentNullException">
            <typeref name="T" /> is null.</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.CreateObserver``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <summary>
            Create observer
            </summary>
            <typeparam name="T">Type of the observer.</typeparam>
            <param name="observable">Object providing the events.</param>
            <param name="onNext">Callback for data.</param>
            <param name="onError">Callback for errors.</param>
            <param name="onCompleted">Callback for completion.</param>
            <returns>New observer object</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.TrapErrorsAsync(System.Threading.Tasks.Task,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Diagnostics.TraceLevel,System.String,System.String,System.String,System.Int32)">
            <summary>
            Trap exceptions from antecedent task.
            </summary>
            <param name="task">Antecedent task.</param>
            <param name="logger">Logger to log exception data.</param>
            <param name="level">Trace level.</param>
            <param name="component">The component in which this log is created.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">Filename where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>Task containing exception if any.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.TrapErrors(System.Action,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Diagnostics.TraceLevel,System.String,System.String,System.String,System.Int32)">
            <summary>
            Trap exceptions from action.
            </summary>
            <param name="action">Action to run.</param>
            <param name="logger">Logger to log exception data.</param>
            <param name="level">Trace level.</param>
            <param name="component">The component in which this log is created.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">Filename where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>Task containing exception if any.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.TrapErrors``1(System.Action{``0},``0,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Diagnostics.TraceLevel,System.String,System.String,System.String,System.Int32)">
            <summary>
            Trap exceptions from action.
            </summary>
            <typeparam name="TKey">Action key type.</typeparam>
            <param name="action">Action to run.</param>
            <param name="key">Key for the action.</param>
            <param name="logger">Logger to log exception data.</param>
            <param name="level">Trace level.</param>
            <param name="component">The component in which this log is created.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">Filename where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>Task containing exception if any.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.WaitAsync(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.
            Traps errors on the task to avoid unobserved task exceptions.
            </summary>
            <param name="task">Task to wait.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</param>
            <returns>true if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.ReplaceScheme(System.Uri,System.String,System.String)">
            <summary>
            Replace URI scheme.
            </summary>
            <param name="uri">Subject URI</param>
            <param name="find">Find string.</param>
            <param name="replace">Replace string.</param>
            <returns>New URI.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replaces the first occurence of search string with replace string.
            </summary>
            <param name="text">The source text.</param>
            <param name="search">The search string.</param>
            <param name="replace">String to be replaced.</param>
            <returns> Updated soruce text. </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.TryDispose(System.Object,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Try and dispose the object if it supports the right interface.
            </summary>
            <param name="obj">Object to dispose.</param>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.GetDeterministicHashCode(System.String)">
            <summary>
            Gets deterministic hash code of the given string.
            Using FNV-1a hash: https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
            </summary>
            <param name="str">The string.</param>
            <returns>The unsigned hash code.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Extensions.SerializeToString(System.Object)">
            <summary>
            Serialize to string format.
            </summary>
            <param name="obj">Object to serialize.</param>
            <returns>String representation.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.HighResolutionDateTime">
            <summary>
            High resolution datetime
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.HighResolutionDateTime.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Microsoft.Graph.Communications.Common.HighResolutionDateTime"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.HighResolutionDateTime.IsAvailable">
            <summary>
            Gets a value indicating whether high resolution datetime is available
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.HighResolutionDateTime.UtcNow">
            <summary>
            Gets UTC now
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.HttpConstants">
            <summary>
            The constant values for http.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.GraphV1Prefixes">
            <summary>
            Expected values of x-ms-gateway-serviceRoot header in the requests coming in to PMA from GraphV1 endpoints
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames">
            <summary>
            The header names.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.ThrowSite">
            <summary>
            The throw site header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.RedirectRegion">
            <summary>
            The redirect region header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.RedirectDu">
            <summary>
            The redirect du header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.CallerRegion">
            <summary>
            The caller region header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.CalleeRegion">
            <summary>
            The callee region header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.ChainId">
            <summary>
            The chain identifier header.
            This header is used to correlate requests to each other within the NGC stack.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.SchedulingServiceTelemetryId">
            <summary>
            Scheduling service telemetry header.
            This header is used to correlate requests with SS service.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsCorrelationId">
            <summary>
            the correlation id header.
            This header is used to correlate requests with presence service at the moment.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsClientVersion">
            <summary>
            The client version header.
            This header has the client version in requests. Used in requests to presence service at the moment.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsClientUserAgent">
            <summary>
            Client User Agent header.
            This header has the user agent in requests. Used in requests to presence service at the moment.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.ScenarioId">
            <summary>
            The scenario identifier header.
            This header is used to correlate requests to each other between client and SF services.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.MessageId">
            <summary>
            The message identifier header.
            This header is used to track individual requests within the NGC stack.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.OriginalMessageId">
            <summary>
            The original message identifier header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.ClientRequestId">
            <summary>
            The client request identifier header.
            This header is used to track individual requests between the client and SF services.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.PmaInstanceUrl">
            <summary>
            The pma instance URL. Used to retarget PSA to a particular PMA instance.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.TransferEncoding">
            <summary>
            The transfer encoding header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.ContentType">
            <summary>
            The content type header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.ContentLength">
            <summary>
            The content length header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.MsDiagnostics">
            <summary>
            The microsoft graph diagnostics header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.ODataVersion">
            <summary>
            The odata version header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.GatewayServiceRootHeader">
            <summary>
            the header that graph adds to the proxied request to PMA
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Duration">
            <summary>
            The duration header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.StrictTransportSecurity">
            <summary>
            The strict transport security header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.CacheControl">
            <summary>
            The cache control header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Date">
            <summary>
            The date header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.RequestId">
            <summary>
            The request identifier header.
            This header is returned by graph to identify the specific request.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.ContextId">
            <summary>
            The context identifier header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Authorization">
            <summary>
            The authorization header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Accept">
            <summary>
            The accept header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Host">
            <summary>
            The host header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Connection">
            <summary>
            The connection header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Location">
            <summary>
            The location header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.UserAgent">
            <summary>
            The user agent header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Tenant">
            <summary>
            The tenant header
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.TenantRegion">
            <summary>
            The tenant region header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.RoutingTargetRegion">
            <summary>
            The Routing-Target-Region header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.MsParticipants">
            <summary>
            X-MS-Participants.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.MsAttribution">
            <summary>
            X-MS-Attribution.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.AccessControlAllowCredentials">
            <summary>
            Access-Control-Allow-Credentials
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.AccessControlAllowOrigin">
            <summary>
            Access-Control-Allow-Origin
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Origin">
            <summary>
            Origin
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Prefer">
            <summary>
            Prefer
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.AccessControlRequestHeaders">
            <summary>
            Access-Control-Request-Headers
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.AccessControlAllowHeaders">
            <summary>
            Access-Control-Allow-Headers
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.AccessControlExposeHeaders">
            <summary>
            Access-Control-Expose-Headers
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.AccessControlRequestMethod">
            <summary>
            Access-Control-Request-Method
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.AccessControlAllowMethods">
            <summary>
            Access-Control-Allow-Methods
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.AccessControlMaxAge">
            <summary>
            Access-Control-Max-Age
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Skypetoken">
            <summary>
            X-Skypetoken
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.WebhooksResource">
            <summary>
            Webhooks-WorkloadResource
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsFwdAttribution">
            <summary>
            x-ms-fwd-attribution – current attribution header value used for billing purposes.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsFwdHost">
            <summary>
            full host uri to be used for calling back into the service. i.e. contoso.west-us.spool.azure.netx-ms-fwd-host – full host uri to be used for calling back into the service. i.e. contoso.west-us.spool.azure.net
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsToken">
            <summary>
            x-ms-fwd-token – PFT like token that can be used to make calls back into the service.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsTokenExpiration">
            <summary>
            x-ms-fwd-token-exp – expiration of the PFT so it doesn’t need cracked to determine this. (need follow up on how to refresh a PFT if needed)
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsResourceName">
            <summary>
            x-ms-fwd-resourceName" - spool resource Id
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsSessionId">
            <summary>
            x-ms-fwd-sessionId (rename to nexusId at some point) – session/nexus call is about. Can be combined with host to make calls back into service
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsUserId">
            <summary>
            x-ms-fwd-userId – sender contoso set userId. Could be empty if redirected call made by App Service or if endpoint does not have a user
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XMsEndpointId">
            <summary>
            x-ms-fwd-endpointId – sender contoso set endpointId. Could be empty if redirected call made by App Service
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.AcceptLanguageHeader">
            <summary>
            Accept-Language header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XForwardedHostHeader">
            <summary>
            X-Forwarded-Host header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.XForwardedProtoHeader">
            <summary>
            X-Forwarded-Proto header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.Server">
            <summary>
            Server header.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.HttpConstants.HeaderNames.IfMatchHeader">
            <summary>
            If-Match header.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.ObjectRoot">
            <summary>
            Base object.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ObjectRoot.#ctor(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.ObjectRoot"/> class.
            </summary>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.ObjectRoot.GraphLogger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.ObjectRootDisposable">
            <summary>
            Base object.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ObjectRootDisposable.#ctor(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.ObjectRootDisposable"/> class.
            </summary>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.ObjectRootDisposable.GraphLogger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Observable`1">
            <summary>
            Observable Base class
            </summary>
            <typeparam name="T">Type of the value being observed.</typeparam>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Observable`1.observers">
            <summary>
            Underlying object containing all observers.
            To achieve Set semantics, use a dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observable`1.#ctor(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Observable`1"/> class.
            </summary>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="E:Microsoft.Graph.Communications.Common.Observable`1.CollectionChanged">
            <summary>
            Collection changed event.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Observable`1.Observers">
            <summary>
            Gets the observers.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observable`1.Subscribe(System.IObserver{`0})">
            <summary>
            Notifies the provider that an observer is to receive notifications.
            </summary>
            <param name="observer">The object that is to receive notifications.</param>
            <returns>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observable`1.OnNext(`0)">
            <summary>
            Notify observers.
            </summary>
            <param name="value">Value to observers.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observable`1.OnNext(`0,System.Collections.Generic.IEnumerable{System.IObserver{`0}})">
            <summary>
            Notify observers.
            </summary>
            <param name="value">Value to observers.</param>
            <param name="observersSubset">Subset of observers to notify.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observable`1.OnError(System.Exception)">
            <summary>
            Notify observers of error.
            </summary>
            <param name="error">Exception information.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observable`1.OnCompleted">
            <summary>
            Notify observers of completion.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Observer`1">
            <summary>
            Observer class.
            </summary>
            <typeparam name="T">Type of the value the observer returns.</typeparam>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Observer`1.onNext">
            <summary>
            Callback for next.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Observer`1.onError">
            <summary>
            Callback for error.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Observer`1.onCompleted">
            <summary>
            Callback for completed.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Observer`1.subscription">
            <summary>
            Underlying observable object.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observer`1.#ctor(System.IObservable{`0},System.Action{`0},System.Action{System.Exception},System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Observer`1"/> class.
            </summary>
            <param name="observable">Observable object.</param>
            <param name="onNext">Callback for next.</param>
            <param name="onError">Callback for error.</param>
            <param name="onCompleted">Callback for completed.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observer`1.System#IObserver{T}#OnNext(`0)">
            <summary>
            Callback when data arrives.
            </summary>
            <param name="value">Observed value.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observer`1.System#IObserver{T}#OnError(System.Exception)">
            <summary>
            Callback when observer hits an error.
            </summary>
            <param name="error">Exception info.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observer`1.System#IObserver{T}#OnCompleted">
            <summary>
            Callback when observer has no more data.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Observer`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.SlimLock">
            <summary>
            A <see cref="T:System.Threading.SemaphoreSlim"/> based lock implementation
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.SlimLock.semaphoreSlim">
            <summary>
            A Semaphore where only 1 thread can be granted access at a time.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.SlimLock.LockAsync">
            <summary>
            Acquire a disposable lock
            </summary>
            <returns>Disposable cleanup to release semaphore.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.SlimLock.Lock">
            <summary>
            Acquire a disposable lock
            </summary>
            <returns>Disposable cleanup to release semaphore.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.SlimLock.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.StateMachine`1">
            <summary>
            Lockfree enum-based state machine.
            Transitions are O(1).
            </summary>
            <typeparam name="TStateEnum">The enum type which represents state.</typeparam>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.StateMachine`1.Mapping">
            <summary>
            Enum mapping to integer
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.StateMachine`1.transitions">
            <summary>
            Transitions sparse matrix
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.StateMachine`1.state">
            <summary>
            Current state
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StateMachine`1.#ctor(`0,Microsoft.Graph.Communications.Common.StateMachine{`0}.Transition[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.StateMachine`1"/> class.
            </summary>
            <param name="initalState">State of the inital.</param>
            <param name="transitions">The transitions.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.StateMachine`1.State">
            <summary>
            Gets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StateMachine`1.TransitionState(`0)">
            <summary>
            Transition to next state.
            Transition to same state is not allowed.
            Non valid transition throws exception.
            </summary>
            <param name="newState">The new state.</param>
            <returns>
            Previous state
            </returns>
            <exception cref="T:System.Exception">If transition is not allow, exception is thrown.</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StateMachine`1.TransitionStateSafe(`0)">
            <summary>
            Transition to the next state.
            Transition to same state has to be allowed via transitions.
            Non valid transition returns null.
            </summary>
            <param name="newState">The new state.</param>
            <returns>
            Previous state or <c>null;</c> if transition is not valid.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StateMachine`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StateMachine`1.CreateTransitions(Microsoft.Graph.Communications.Common.StateMachine{`0}.Transition[])">
            <summary>
            Creates the transitions.
            </summary>
            <param name="transitions">The transitions.</param>
            <returns>Transitions matrix</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.StateMachine`1.Transition">
            <summary>
            Single transition from <see cref="P:Microsoft.Graph.Communications.Common.StateMachine`1.Transition.Source"/> to <see cref="P:Microsoft.Graph.Communications.Common.StateMachine`1.Transition.Targets"/>
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StateMachine`1.Transition.#ctor(`0,`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.StateMachine`1.Transition"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="targets">The targets.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.StateMachine`1.Transition.Source">
            <summary>
            Gets the source state.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.StateMachine`1.Transition.Targets">
            <summary>
            Gets the target states.
            </summary>
            <value>
            The targets.
            </value>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.TaskExtension">
            <summary>
            Extensions for Task
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.TaskExtension.IgnoreExceptionAsync``1(System.Threading.Tasks.Task{``0},System.Type)">
            <summary>
            Ignore exception
            </summary>
            <param name="task">task</param>
            <param name="exceptionType">exception type</param>
            <typeparam name="T">type</typeparam>
            <returns>Task representing completion</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.TaskExtension.IgnoreExceptionAsync(System.Threading.Tasks.Task,System.Type)">
            <summary>
            Ignore exception
            </summary>
            <param name="task">task</param>
            <param name="exceptionType">exception type</param>
            <returns>Task representing completion</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.TaskExtension.ExpectExceptionAsync(System.Threading.Tasks.Task,System.Type)">
            <summary>
            Except an exception
            </summary>
            <param name="task">task</param>
            <param name="expectedEx">expected exception</param>
            <returns>Task representing completion</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.TaskExtension.ExpectExceptionAsync``1(System.Threading.Tasks.Task{``0},System.Type)">
            <summary>
            Except an exception
            </summary>
            <param name="task">task</param>
            <param name="expectedEx">expected exception</param>
            <typeparam name="T">type</typeparam>
            <returns>Task representing completion</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.TaskQueue">
            <summary>
            Task queue to encapsulate chaining of tasks.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.TaskQueue.MaxWaitForShutdown">
            <summary>
            Wait for shutdown
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.TaskQueue.leafTask">
            <summary>
            Task to avoid overlapping operations.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.TaskQueue.#ctor(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Threading.Tasks.Task)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.TaskQueue"/> class.
            </summary>
            <param name="logger">Logger instance.</param>
            <param name="antecedent">Optional antecedent task.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.TaskQueue.EnqueueAsync(System.Func{System.Threading.Tasks.Task,System.Threading.Tasks.Task})">
            <summary>
            Enqueue an operation
            </summary>
            <param name="operation">Operation to queue.</param>
            <returns>A task that represents the queued operation.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.TaskQueue.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Utilities">
            <summary>
            Utilities class.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Utilities.SafeDispose``1(``0@,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Safely dispose members.
            </summary>
            <typeparam name="T">Type of the member.</typeparam>
            <param name="t">Reference to member.</param>
            <param name="logger">Logger instance.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Utilities.CombineHashCodes(System.Object[])">
            <summary>
            Combine several hash codes into a single hash code
            </summary>
            <param name="args">Objects to combine into a single hash.</param>
            <returns>Combined hash code.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Utilities.EncodeReplacesUriToBase64(System.Uri)">
            <summary>
            Base64 Encodes the replaces URI for consultative call transfer scenario.
            </summary>
            <param name="replacesUri">The replaces URI.</param>
            <returns>The encoded replaces context.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Utilities.DecodeReplacesContextFromBase64(System.String)">
            <summary>
            Decodes the replaces context for consultative call transfer scenario.
            </summary>
            <param name="replacesContext">The replaces context.</param>
            <returns>The decoded replaces URI.</returns>
            <exception cref="T:System.InvalidOperationException">Replaces context provided for consultative transfer is invalid.</exception>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.CertUtils">
            <summary>
            Certificates utilities
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CertUtils.GetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Get certificate from the certificate store, throw exception if not found.
            </summary>
            <param name="thumbprint">The thumbprint.</param>
            <param name="location">The certificate store location.</param>
            <returns>True if the certificate is found.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CertUtils.TryGetCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Tries to the get certificate from the certificate store.
            </summary>
            <param name="thumbprint">The thumbprint.</param>
            <param name="location">The certificate store location.</param>
            <returns>True if the certificate is found.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CertUtils.TryGetCertificate(System.String,System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Tries to the get certificate from the certificate store.
            </summary>
            <param name="issuer">The issuer.</param>
            <param name="enhancedKeyUsage">Enhanced key usage.</param>
            <param name="location">The certificate store location.</param>
            <returns>True if the certificate is found.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CertUtils.TryGetCertificateWithCommonName(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Tries to get certificate with common name from the certificate store.
            </summary>
            <param name="commonName">Name of the common.</param>
            <param name="location">The location.</param>
            <returns>The certificate. null if not found.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CertUtils.HasPrivateKeyAccess(System.Security.Cryptography.X509Certificates.X509Certificate2,Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Verifies the private key access on a given certificate.
            If a logger is provided, the cert Common name and any errors
            are printed out.
            </summary>
            <param name="certificate">The certificate.</param>
            <param name="logger">The logger.</param>
            <returns>True if private key can be accessed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CertUtils.FindEnhancedKeyUsage(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String)">
            <summary>
            Find enhanced key usage.
            </summary>
            <param name="certs">Certificate collection.</param>
            <param name="oid">object id.</param>
            <returns>new certificate collection.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.CollectionUtils">
            <summary>
            Collection Utilities
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CollectionUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Analogous to IList.ForEach but for IEnumerable
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="enumerable">Enumeration</param>
            <param name="action">Action to invoke on each element</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CollectionUtils.ForEachParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Analogous to IList.ForEach but for IEnumerable
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="enumerable">Enumeration</param>
            <param name="action">Action to invoke on each element</param>
            <param name="logger">Instance of the Logger</param>
            <returns>Exception if any.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CollectionUtils.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Get Value or default
            </summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="dictionary">Dictionary instance</param>
            <param name="key">Key to lookup</param>
            <returns>Value from dictionary or default value.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CollectionUtils.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Get Value or default
            </summary>
            <typeparam name="TKey">Type of the key</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="dictionary">Dictionary instance</param>
            <param name="key">Key to lookup</param>
            <param name="defaultValue">The default value to be returned if it doesn't exist.</param>
            <returns>
            Value from dictionary or default value.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CollectionUtils.TryRemoveAndDispose``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Try to remove key from concurrent dictionary and dispose the value.
            </summary>
            <typeparam name="TKey">Key type</typeparam>
            <typeparam name="TValue">Value type</typeparam>
            <param name="dictionary">Dictionary to clean up</param>
            <param name="key">Key to lookup</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CollectionUtils.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range of source values into target.
            </summary>
            <typeparam name="T">The type of Collection</typeparam>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.CollectionUtils.ToSortedList``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
            Converts sequence to a sorted list.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="keySelector">The function selector which provides a key given the value.</param>
            <returns>Sorted list.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.EnumToIntMapping`1">
            <summary>
            Mapping from enum to sequantial integer values and vice versa.
            Lookup is O(1), if enum is sequential lookup is skipped.
            </summary>
            <typeparam name="T">Enum type</typeparam>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.EnumToIntMapping`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.EnumToIntMapping`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.EnumToIntMapping`1.ValuesCount">
            <summary>
            Gets the values count.
            </summary>
            <value>
            The values count.
            </value>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.EnumToIntMapping`1.Item(`0)">
            <summary>
            Converts enum value <paramref name="value"/> to integer.
            </summary>
            <param name="value">The enum value.</param>
            <returns>Integer value</returns>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.EnumToIntMapping`1.Item(System.Int32)">
            <summary>
            Converts integer value <paramref name="value"/> to enum <typeparamref name="T"/>.
            </summary>
            <param name="value">The integer value.</param>
            <returns>Enum value</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.EnumUtils">
            <summary>
            Enum Utilities
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.EnumUtils.Parse``1(System.String)">
            <summary>
            Parses the string into enum
            </summary>
            <typeparam name="TEnum">Enum's type to output</typeparam>
            <param name="value">input string</param>
            <returns>Enum's parsed value</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.EnumUtils.GetDescription(System.Enum)">
            <summary>
            Gets the enum's description attribute.
            </summary>
            <param name="value">The value.</param>
            <returns>Enum's description</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.ExceptionUtils">
            <summary>
            Exception utilities
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ExceptionUtils.GetBaseException(System.Exception)">
            <summary>
            Gets the base exception of an exception. If the exception is an AggregateException, then the inner exceptions are flattened
            before getting the base exception.
            </summary>
            <param name="exception">The exception</param>
            <returns>Whether it's base exception</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ExceptionUtils.FindInnerException(System.Exception)">
            <summary>
            Find the inner exception that caused the error.
            </summary>
            <param name="exception">Top level exception.</param>
            <returns>Inner exception causing the error.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ExceptionUtils.FormatException(System.Exception,System.Int32)">
            <summary>
            Format the exception including up to <paramref name="depth"/> inner exceptions.
            Includes stack trace of the last inner exception (up to <paramref name="depth"/>).
            </summary>
            <param name="exception">Top level exception.</param>
            <param name="depth">The depth of inner exceptions, valid range is [1..4].
            1 means that most top exception will be formatted. </param>
            <returns>
            Formatted exception
            </returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.GuidUtils">
            <summary>
            Guid Utils
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.GuidUtils.EnsureNotEmpty(System.Guid)">
            <summary>
            Ensures Guid is not empty by generating a random guid if it is empty
            </summary>
            <param name="guid">input guid</param>
            <returns>A guaranteed guid that is not empty</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.GuidUtils.EnsureNotEmpty(System.Nullable{System.Guid})">
            <summary>
            Ensures Guid is not empty by generating a random guid if it is empty
            </summary>
            <param name="guid">input guid</param>
            <returns>A guaranteed guid that is not empty</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.GuidUtils.ParseOrNew(System.String)">
            <summary>
            Parse and return the guid if valid else return new guid
            </summary>
            <param name="input">input</param>
            <returns>Guid of input or new guid</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.JsonUtils">
            <summary>
            Json Utils
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.JsonUtils.JsonContentType">
            <summary>
            Json content type
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.MathUtils">
            <summary>
            Various math utilities
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.MathUtils.CeilingRound(System.Int32,System.Int32)">
            <summary>
            Gets the ceiling value after rounding.
            </summary>
            <param name="n">Value to round up.</param>
            <param name="round">Rounding increment.</param>
            <returns>Ceiling value.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.MathUtils.ToBitwiseDouble(System.UInt64)">
            <summary>
            Use bit converter instead of using unsafe code to cast.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.MathUtils.ToBitwiseUlong(System.Double)">
            <summary>
            Use bit converter instead of using unsafe code to cast.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.MathUtils.ToBitwiseFloat(System.UInt32)">
            <summary>
            Use bit converter instead of using unsafe code to cast.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.MathUtils.ToBitwiseUint(System.Single)">
            <summary>
            Use bit converter instead of using unsafe code to cast.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.MetricUtils">
            <summary>
            The metric utils class
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.MetricUtils.MeasureDurationAsync(System.Func{System.Threading.Tasks.Task},System.Action{System.Int64})">
            <summary>
            Mesure the duration of task.
            </summary>
            <param name="task">The task to measure</param>
            <param name="setMetricTask">The task to set metric</param>
            <returns>The task for wait</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.ReflectionUtils">
            <summary>
            Reflection utilities
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.ReflectionUtils.CachedGetDelegates">
            <summary>
            Cache all the Get delegates for a property and convert them to
            a function. This makes getting properties via reflection
            much faster, and the fucntion doesn't change for any given
            property.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.ReflectionUtils.CachedSetDelegates">
            <summary>
            Cache all the Set delegates for a property and convert them to
            a action pointer. This makes setting properties via reflection
            much faster, and the action doesn't change for any given
            property.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.ReflectionUtils.CachedPropertyInfos">
            <summary>
            Gets the property info cache. Used by MetaDataPropertyInfo.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.Implements(System.Type,System.Type)">
            <summary>
            Check if type is subclass of a generic type.
            </summary>
            <param name="type">Type to check.</param>
            <param name="checkType">Generic type.</param>
            <returns>True if it is a subclass.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.Implements``1(System.Type)">
            <summary>
            Check if type is subclass of a generic type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="type">Type to check.</param>
            <returns>True if it is a subclass.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.DerivesFrom(System.Type,System.Type)">
            <summary>
            Check if the type derives from the base type
            </summary>
            <param name="type">Type to check</param>
            <param name="baseType">Base type</param>
            <returns>True if it is or derives from the base type</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.DerivesFrom``1(System.Type)">
            <summary>
            Check if the type derives from the <typeparamref name="T"/> type.
            </summary>
            <typeparam name="T">The type to check.</typeparam>
            <param name="type">Type to check</param>
            <returns>True if it is or derives from the base type</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.GetValueCached(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Gets the value using a cached delegate.
            </summary>
            <param name="propertyInfo">The property info to use.</param>
            <param name="object">The object containing the property.</param>
            <returns>The fetched object.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.SetValueCached(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Set the value using a cached delegate.
            </summary>
            <param name="propertyInfo">The property info to use.</param>
            <param name="object">The object containing the property.</param>
            <param name="value">The value to be set.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.GetPropertyUsingReflection(System.Object,System.String)">
            <summary>
            Get named property of an object
            </summary>
            <param name="obj">Object to get property from.</param>
            <param name="name">Name of the property.</param>
            <returns>Value of the property</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.SetPropertyUsingReflection(System.Object,System.String,System.Object)">
            <summary>
            Set named property of an object
            </summary>
            <param name="obj">Object to get property from.</param>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property.</param>
            <returns><c>true</c> if the property was set successfully, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.MetadataProperty(System.Object,System.String)">
            <summary>
            Get property info and cache for later use.
            </summary>
            <param name="obj">Object from which to get property info.</param>
            <param name="name">Name of the property.</param>
            <returns>Property Info.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.CastGetter``2(System.Delegate)">
            <summary>
            Cast the typed getter function to an untyped function.
            </summary>
            <typeparam name="T1">The type of object.</typeparam>
            <typeparam name="T2">The type of property.</typeparam>
            <param name="delegate">The delegate to cast.</param>
            <returns>The function cast to accept and return objects.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.ReflectionUtils.CastSetter``2(System.Delegate)">
            <summary>
            Cast the typed setter action to an untyped action.
            </summary>
            <typeparam name="T1">The type of object.</typeparam>
            <typeparam name="T2">The type of property.</typeparam>
            <param name="delegate">The delegate to cast.</param>
            <returns>The action cast to accept objects.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.SafeNativeMethods">
            <summary>
            Contains p/invokes and associated wrappers for the Native methods
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.SafeNativeMethods.GetPreciseSystemTime">
            <summary>
            Gets precise system time
            </summary>
            <returns>Precise system time</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.SafeNativeMethods.GetSystemTimePreciseAsFileTime(System.Int64@)">
            <summary>
            Retrieves the current system date and time with the highest possible level of precision
            </summary>
            <param name="filetime">A pointer to a FILETIME structure that contains the current system date and time in UTC format</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.SecureStringUtils">
            <summary>
            SecureString Utilities
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.SecureStringUtils.ConvertToUnsecureString(System.Security.SecureString)">
            <summary>
            Converts a SecureString into a managed string for consumption
            </summary>
            <param name="secureString">The SecureString to convert into a managed string</param>
            <returns>String representation of the SecureString</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.StringUtils">
            <summary>
            String Utils
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.ConvertOrDefault``1(System.String,``0)">
            <summary>
            Convert string to type or return default
            </summary>
            <typeparam name="T">Type of return value</typeparam>
            <param name="value">input value</param>
            <param name="defaultValue">default value</param>
            TODO bodogado: consider merging with Extensions.ChangeType
            <returns>result of the conversion</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Case insensitive string comparison
            </summary>
            <param name="valueA">Input string A</param>
            <param name="valueB">Input string B</param>
            <returns>Value indicating whether strings are equal in a case insensitive comparision</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.ToCamelCase(System.String)">
            <summary>
            Converts <paramref name="value"/> to camel casing.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Returns string in camel case.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.NamespaceInCamelCase(System.String)">
            <summary>
            Returns a namespace in camel case.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>The namespace string in camel case.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.NamespaceInPascalCase(System.String)">
            <summary>
            Returns a namespace in pascal case.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>The namespace string in pascal case.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.ToPascalCase(System.String)">
            <summary>
            Converts <paramref name="value"/> to pascal casing.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Returns string in pascal case.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.ToBase64(System.ArraySegment{System.Byte},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Convert array segment to base 64 representation.
            </summary>
            <param name="data">Data to convert.</param>
            <param name="offset">Optional override offset.</param>
            <param name="count">Optional override count.</param>
            <returns>Base 64 encoded string.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.ToBase64(System.Byte[])">
            <summary>
            Convert byte array to base64.
            </summary>
            <param name="data">The data.</param>
            <returns>Base64 representation.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.ToBase64Url(System.ArraySegment{System.Byte},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Convert array segment to base 64 URL representation.
            </summary>
            <param name="data">Data to convert.</param>
            <param name="offset">Optional override offset.</param>
            <param name="count">Optional override count.</param>
            <returns>Base 64 encoded string.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.FromBase64(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="data">The string to convert.</param>
            <returns>An array of 8-bit unsigned integers.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.FromBase64Url(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="data">The string to convert.</param>
            <returns>An array of 8-bit unsigned integers.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.SafeFormat(System.String,System.Object[])">
            <summary>
            Format a string with arguments.
            </summary>
            <param name="text">Format string.</param>
            <param name="args">Optional arguments.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />, using the specified separator between each member.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <param name="separator">The string to use as a separator.<paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</param>
            <returns>A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string. If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.TrimStart(System.String,System.String)">
            <summary>
            Remove a substring from the beginning of a given string.
            This is called iteratively.
            </summary>
            <param name="target">The target.</param>
            <param name="trimString">The trim string.</param>
            <returns>The string after being trimmed.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.TrimEnd(System.String,System.String)">
            <summary>
            Remove a substring from the end of a given string.
            This is called iteratively.
            </summary>
            <param name="target">The target.</param>
            <param name="trimString">The trim string.</param>
            <returns>The string after being trimmed.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.StringUtils.GetSHA256Hash(System.String)">
            <summary>
            Creates a SHA256 hash of the passed string.
            </summary>
            <param name="input">The input string.</param>
            <returns> The SHA256 hash.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.WeakKey`1">
            <summary>
            Wrapping a weak reference and recording hash code.
            Note: It is the responsibility of the client to clean up the collection
            entry in the <c>finalizer</c> of the object. Otherwise the key will not match
            for subsequent lookups.
            </summary>
            <typeparam name="T">Type of the key to be used in a lookup.</typeparam>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.WeakKey`1.hashCode">
            <summary>
            Record hash code from the underlying object.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.WeakKey`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.WeakKey`1"/> class.
            </summary>
            <param name="t">Underlying object.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.WeakKey`1.#ctor(System.WeakReference{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.WeakKey`1"/> class.
            </summary>
            <param name="weak">Underlying object wrapped in weak reference.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.WeakKey`1.Value">
            <summary>
            Gets the weak reference to the underlying object.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.WeakKey`1.Unwrapped">
            <summary>
            Gets the target.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.WeakKey`1.op_Implicit(Microsoft.Graph.Communications.Common.WeakKey{`0})~`0">
            <summary>
            Implicit type cast operator.
            </summary>
            <param name="key">Extract underlying object.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.WeakKey`1.op_Implicit(`0)~Microsoft.Graph.Communications.Common.WeakKey{`0}">
            <summary>
            Implicit cast operator to weak key.
            </summary>
            <param name="t">Wrap with weak key.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.WeakKey`1.GetHashCode">
            <summary>
            Overrides hash code to hand out the underlying object's hash code.
            </summary>
            <returns>Hash code of underlying object.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.WeakKey`1.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified object is equal to the current object.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.WeakKeyDictionary`2">
            <summary>
            Dictionary with weak reference for the key.
            </summary>
            <typeparam name="TKey">Key type which must be a reference type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.WeakKeyDictionary`2.Cleanup">
            <summary>
            Cleans keys where the weak references have been garbage collected.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Validator">
            <summary>
            Helper class with various condition validation utilities.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.Any(System.Collections.IEnumerable)">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable" /> to check for emptiness.</param>
            <returns>
            <see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.FirstObject(System.Collections.IEnumerable,System.Func{System.Object,System.Boolean})">
            <summary>
            Gets the first object in the enumerable that matches the specified predicate.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable" /> to check for object.</param>
            <param name="predicate">The <see cref="T:System.Func`2" /> used to match the object.</param>
            <returns>
            <see langword="object" /> if the source sequence contains the matching element; otherwise, <see langword="null" />.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.FirstObject(System.Collections.IEnumerable)">
            <summary>
            Gets the first object in the enumerable.
            </summary>
            <param name="source">The <see cref="T:System.Collections.IEnumerable" /> to check for object.</param>
            <returns>
            <see langword="object" /> if the source sequence contains an element; otherwise, <see langword="null" />.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.IsTrue(System.Boolean,System.String,System.String)">
            <summary>
            Throw ArgumentException <paramref name="condition"/> is not <c>true</c>
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="paramName">Optional variable name.</param>
            <param name="message">Optional message.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.IsTrue``1(System.Boolean,System.String)">
            <summary>
            Throw <typeparamref name="T"/> exception if <paramref name="condition"/> is not <c>true</c>
            </summary>
            <typeparam name="T">Exception type to raise</typeparam>
            <param name="condition">Condition to check.</param>
            <param name="message">Optional message.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.IsFalse(System.Boolean,System.String,System.String)">
            <summary>
            Throw ArgumentException <paramref name="condition"/> is not <c>false</c>
            </summary>
            <param name="condition">Condition to check.</param>
            <param name="paramName">Optional variable name.</param>
            <param name="message">Optional message.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.IsFalse``1(System.Boolean,System.String)">
            <summary>
            Throw <typeparamref name="T"/> exception if <paramref name="condition"/> is not <c>false</c>
            </summary>
            <typeparam name="T">Exception type to raise</typeparam>
            <param name="condition">Condition to check.</param>
            <param name="message">Optional message.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.IsNull(System.Object,System.String,System.String)">
            <summary>
            Throw ArgumentException if obj is not null.
            </summary>
            <param name="obj">The object to check.</param>
            <param name="paramName">Optional variable name.</param>
            <param name="message">Optional message.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.NotNull``1(``0,System.String,System.String)">
            <summary>
            Throw ArgumentNullException if obj is null.
            </summary>
            <typeparam name="T">The type of the object to validate.</typeparam>
            <param name="obj">The object.</param>
            <param name="paramName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <returns>The validated object.</returns>
            <exception cref="T:System.ArgumentException">If the object is null.</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.NotEmpty``1(``0,System.String,System.String)">
            <summary>
            Throw ArgumentNullException if obj is null.
            </summary>
            <typeparam name="T">Enumerable type</typeparam>
            <param name="obj">The object to check.</param>
            <param name="paramName">Variable name.</param>
            <param name="message">Optional message.</param>
            <returns>The validated <see cref="T:System.Collections.IEnumerable" />.</returns>
            <exception cref="T:System.ArgumentNullException">If the object is null.</exception>
            <exception cref="T:System.ArgumentException">If the object is empty.</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.InRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws ArgumentOutOfRangeException if <paramref name="value" /> is not in the given range
            defined by <paramref name="minValue" /> and <paramref name="maxValue" />
            </summary>
            <typeparam name="T">Comparable</typeparam>
            <param name="value">value to verify</param>
            <param name="minValue">Minimum range value</param>
            <param name="maxValue">Maximum range value</param>
            <param name="paramName">Variable name.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is out of range.</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.NotNullOrWhitespace(System.String,System.String,System.String)">
            <summary>
            Throws the ArgumentException if string is null or whitespace.
            </summary>
            <param name="value">value to check</param>
            <param name="paramName">Variable name.</param>
            <param name="message">Optional message.</param>
            <returns>The validated <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentException">If the string is null or whitespace.</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.Equals``1(``0,``0,System.String,System.String)">
            <summary>
            Throw if <paramref name="value" />&gt; is not equal to <paramref name="expected" />
            </summary>
            <typeparam name="T">Type of the input value</typeparam>
            <param name="value">value</param>
            <param name="expected">expected</param>
            <param name="paramName">paramName</param>
            <param name="message">Optional message.</param>
            <returns>
            The input value if validation succeeded.
            </returns>
            <exception cref="T:System.ArgumentException">The argument value should match the expected value.</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.Equals``1(``0,``0,System.Collections.IComparer,System.String,System.String)">
            <summary>
            Throw if <paramref name="value" />&gt; is not equal to <paramref name="expected" />
            </summary>
            <typeparam name="T">Type of the input value</typeparam>
            <param name="value">value</param>
            <param name="expected">expected</param>
            <param name="comparer">comparer</param>
            <param name="paramName">paramName</param>
            <param name="message">Optional message.</param>
            <returns>
            The input value if validation succeeded.
            </returns>
            <exception cref="T:System.ArgumentException">The argument value should match the expected value.</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.Equals``2(``0,``0,System.String)">
            <summary>
            Throws the <typeparamref name="TE" /> if <paramref name="value" />&gt; is not equal to <paramref name="expected" />
            </summary>
            <typeparam name="T">Type of the input value</typeparam>
            <typeparam name="TE">The type of Exception to throw</typeparam>
            <param name="value">value</param>
            <param name="expected">expected</param>
            <param name="message">Optional message.</param>
            <returns>
            The input value if validation succeeded.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.NotEquals``1(``0,``0,System.String,System.String)">
            <summary>
            Throw if <paramref name="value" />&gt; is equal to <paramref name="unexpected" />
            </summary>
            <typeparam name="T">Type of the input value</typeparam>
            <param name="value">The value to compare.</param>
            <param name="unexpected">The unexpected value.</param>
            <param name="paramName">the parameter name.</param>
            <param name="message">Optional message.</param>
            <returns>
            The input value if validation succeeded.
            </returns>
            <exception cref="T:System.ArgumentException">The argument value should not match the expected value.</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.VerifyNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Throws the ArgumentException if collection contains the specified <paramref name="key" />
            </summary>
            <typeparam name="TK">Key type</typeparam>
            <typeparam name="TV">Value type</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.VerifyContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Throws the ArgumentException if collection does not contain the specified <paramref name="key" />
            </summary>
            <typeparam name="TK">Key type</typeparam>
            <typeparam name="TV">Value type</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.VerifyContainsKey``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Throws the ArgumentException if collection does not contain the specified <paramref name="key" />
            </summary>
            <typeparam name="TK">Key type</typeparam>
            <typeparam name="TV">Value type</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.VerifyContains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Throws the ArgumentException if collection does not contains the specified <paramref name="value" />
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Validator.IsEnum(System.Type)">
            <summary>
            Throws the ArgumentException if given type is not Enum
            </summary>
            <param name="type">The type</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Exceptions.ConfigurationException">
            <summary>
            Configuration is bad. Mandatory configuration setting is missing. Or raw (string) setting value can not be converted to property type.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.ConfigurationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.ConfigurationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Exceptions.InvalidStateTransitionException">
            <summary>
            Exception to throw when a invalid transition is requested
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.InvalidStateTransitionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.InvalidStateTransitionException"/> class.
            </summary>
            <param name="message">the exception message</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Exceptions.RoutingException">
            <summary>
            Generic routing exception
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.RoutingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.RoutingException"/> class.
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.RoutingException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.RoutingException"/> class.
            </summary>
            <param name="message">The exception message</param>
            <param name="erroCode">The error code</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.RoutingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.RoutingException"/> class.
            </summary>
            <param name="message">The exception message</param>
            <param name="erroCode">The error code</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.RoutingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.RoutingException"/> class.
            </summary>
            <param name="message">message</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Exceptions.RoutingException.ErrorCode">
            <summary>
            Gets the exception code.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException">
            <summary>
            Indicate there's a bad request
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException"/> class.
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException"/> class.
            </summary>
            <param name="message">The exception message</param>
            <param name="erroCode">The error code</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException"/> class.
            </summary>
            <param name="message">The exception message</param>
            <param name="erroCode">The error code</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Exceptions.RoutingBadRequestException"/> class.
            </summary>
            <param name="message">message</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.OData.CamelCaseStringEnumConverter">
            <summary>
            Converts an System.Enum to and from its name string value.
            When converting to its string value it will use camelCase formatting.
            </summary>
            <seealso cref="T:Newtonsoft.Json.Converters.StringEnumConverter" />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.CamelCaseStringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.OData.CamelCaseStringEnumConverter"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.OData.CamelCaseStringEnumConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.CamelCaseStringEnumConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.CamelCaseStringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.OData.ODataConfiguration">
            <summary>
            OData Configuration object to be used for different
            classes.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataConfiguration.#ctor(System.Boolean,System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.OData.ODataConfiguration" /> class.
            </summary>
            <param name="addOdataType">If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property.</param>
            <param name="odataAssemblies">The OData assemblies.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.OData.ODataConfiguration.JsonSerializerSettingsForOData">
            <summary>
            Gets json serializer settings for OData.
            </summary>
            <returns>
              <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> for serializing/deserializing OData objects.
            </returns>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.OData.ODataConfiguration.ODataAssemblies">
            <summary>
            Gets the list of OData assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataConfiguration.FillODataJsonSerializerSettings(System.Boolean,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Fills the json serializer settings.
            </summary>
            <param name="addOdataType">If true, attach the @odata.type property to each object, otherwise only attach this property if it's already present.</param>
            <param name="settings">The settings.</param>
            <returns>Serialization settings.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.OData.ODataConstants">
            <summary>
            The OData constants.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.OData.ODataConstants.ODataType">
            <summary>
            The OData type.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter">
            <summary>
            Handles resolving interfaces to the correct derived class during serialization/deserialization.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.CachedExtensionData">
            <summary>
            Cache the extension data properties for each type.
            This helps to optimize the additional data processing.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.cachedTypeMapping">
            <summary>
            Cache the @odata.type to Type map.
            This cannot be a static, givent that different E2E tests use different assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.#ctor(System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter"/> class.
            </summary>
            <param name="typeAssemblies">The type assemblies.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes the object to the correct type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">The interface type.</param>
            <param name="existingValue">The existing value of the object being read.</param>
            <param name="serializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> for deserialization.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.GetObjectReader(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Gets the object reader
            </summary>
            <param name="originalReader">Json blob reader</param>
            <param name="jToken">JToken for the reader</param>
            <returns>The reader from the JToken</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataJsonConverter.ReadODataType(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Gets the <see cref="T:System.Type" /> of object serialized in <paramref name="jObject" />.
            </summary>
            <param name="jObject">The <see cref="T:Newtonsoft.Json.Linq.JObject"/> to be read from.</param>
            <returns>
            <see cref="T:System.Type" /> of the object serialized in <paramref name="jObject" />, if available at runtime;
            else <code>null</code>
            </returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.OData.ODataResolver">
            <summary>
            Contract resolver that allows us to create OData json payloads with type information.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataResolver.#ctor(System.Boolean,System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.OData.ODataResolver"/> class which can be used to
            serialize/deserialize classes present in <paramref name="typeAssemblies"/>.
            </summary>
            <param name="addOdataType">If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property.</param>
            <param name="typeAssemblies">
            Assemblies in which the OData object exist.
            </param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataResolver.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Microsoft.Graph.Communications.Common.OData.ODataResolver"/> class from being created.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataResolver.ResolveContractConverter(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.OData.ODataSerializeAsTypeAttribute">
            <summary>
            Specify how a given object should be written/read on the wire.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataSerializeAsTypeAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.OData.ODataSerializeAsTypeAttribute" /> class.
            </summary>
            <param name="name">The name of the class.</param>
            <param name="renameWhenSerialized">If set to <c>true</c> use the <see cref="P:Microsoft.Graph.Communications.Common.OData.ODataSerializeAsTypeAttribute.Name"/> to serialize the class.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.OData.ODataSerializeAsTypeAttribute.Name">
            <summary>
            Gets the name of the class.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.OData.ODataSerializeAsTypeAttribute.RenameWhenSerialized">
            <summary>
            Gets a value indicating whether to rename when serializing this object.
            When true, the object will be serialized to <see cref="P:Microsoft.Graph.Communications.Common.OData.ODataSerializeAsTypeAttribute.Name"/>, otherwise
            the object will be serialized as the actual object name.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.OData.ODataTimeSpanConverter">
            <summary>
            Custom json converter for TimeSpans.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.OData.ODataTimeSpanConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataTimeSpanConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataTimeSpanConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Deserializes the object to the correct type.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">The interface type.</param>
            <param name="existingValue">The existing value of the object being read.</param>
            <param name="serializer">The <see cref="T:Newtonsoft.Json.JsonSerializer"/> for deserialization.</param>
            <returns>The deserialized object</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataTimeSpanConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.OData.ODataTypeValueProvider">
            <summary>
            OData Type Value Provider. This provides the "@odata.type"
            value for a type.
            </summary>
            <seealso cref="T:Newtonsoft.Json.Serialization.IValueProvider" />
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.OData.ODataTypeValueProvider.CachedTypeValues">
            <summary>
            Cache the type values for each type.
            This is called for each object being serialized, the
            values don't change, and we save on reflection + string manipulation.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.OData.ODataTypeValueProvider.type">
            <summary>
            The type
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataTypeValueProvider.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.OData.ODataTypeValueProvider" /> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataTypeValueProvider.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.OData.ODataTypeValueProvider.SetValue(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.AadApplicationIdentity">
            <summary>
            The application identity in Azure AD.
            </summary>
            <remarks>
            For better logging experience, all property names should be specific enough. Avoid using generic name such as Id, Name, etc.
            </remarks>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.AadApplicationIdentity.AppId">
            <summary>
            Gets or sets the id of application.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.AadApplicationIdentity.AppName">
            <summary>
            Gets or sets the name of application.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.CallerInfo">
            <summary>
            Class that encapsulates the caller's (creator's) information
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.CallerInfo.ToStringCache">
            <summary>
            To string cache
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.CallerInfo.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.CallerInfo"/> class.
            </summary>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.CallerInfo.FilePath">
            <summary>
            Gets the file path
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.CallerInfo.LineNumber">
            <summary>
            Gets the line number
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.CallerInfo.MemberName">
            <summary>
            Gets the member name
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.CallerInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.CallerInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the caller info.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the caller info.
            </returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.ClientLogEventId">
            <summary>
            Event ids for client logs
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.ClientLogEventId.ClientHttpTrace">
            <summary>
            The event id for client HTTP trace.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.ClientLogEventId.ClientTrace">
            <summary>
            The event id for client trace
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.ClientEtwLogger">
            <summary>
            Logger for client that publishes to ETW.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.ClientEtwLogger.#ctor(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.ClientEtwLogger" /> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.ClientEtwLogger.HttpTrace(System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Trace for client's http calls.
            </summary>
            <param name="correlationId">The correlation identifier.</param>
            <param name="component">The component.</param>
            <param name="traceLevel">The trace level.</param>
            <param name="url">The URL for the request.</param>
            <param name="transactionDirection">The direction of the request this request/response corresponds to.</param>
            <param name="message">The body for the request/response.</param>
            <param name="appName">Name of the application.</param>
            <param name="appId">The application identifier.</param>
            <param name="mtid">The managed tid.</param>
            <param name="callingLine">The line in which log is produced.</param>
            <param name="traceType">Denote whether this is request/response.</param>
            <param name="headers">The headers.</param>
            <param name="method">The method for the request.</param>
            <param name="responseCode">The response code from response.</param>
            <param name="responseTime">Time taken to process the request.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.ClientEtwLogger.Trace(System.Guid,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            Trace for client's normal trace calls.
            </summary>
            <param name="correlationId">The correlation identifier.</param>
            <param name="component">The component.</param>
            <param name="traceLevel">The trace level.</param>
            <param name="message">The message.</param>
            <param name="appName">Name of the application.</param>
            <param name="appId">The application identifier.</param>
            <param name="mtid">The managed tid.</param>
            <param name="callingLine">The line in which log is produced.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.ClientEtwLogger.Invoke(System.Reflection.MethodInfo,Microsoft.Graph.Communications.Common.Telemetry.LogEvent)">
            <summary>
            Invoke the method
            </summary>
            <param name="methodInfo">Method to invoke</param>
            <param name="logEvent">Log event</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.ClientEtwLogger.OnNext(Microsoft.Graph.Communications.Common.Telemetry.LogEvent)">
            <summary>
            Called when [next] log comes in.
            </summary>
            <param name="log">The object.</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger">
            <summary>
            Logging portion of graph.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.StartupLoggerNameSuffix">
            <summary>
            The startup logger name prefix
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.correlationId">
            <summary>
            Value of correlation id.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.logicalThreadId">
            <summary>
            The logical thread identifier.
            This id is used for tracking the flow of one request throughout
            the lifetime until it ends.
            /// </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.observable">
            <summary>
            Object to enable subscribing to output stream.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Boolean,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger"/> class.
            </summary>
            <param name="component">The component in which log is createdThe component in which this logger is created.</param>
            <param name="properties">Common properties to be set on each event</param>
            <param name="redirectToTrace">if set to <c>true</c> [redirect to trace].</param>
            <param name="obfuscationConfiguration">The obfuscation configuration</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.CorrelationId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.LogicalThreadId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.Properties">
            <summary>
            Gets the common properties for each event.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.Component">
            <summary>
            Gets or the component of logger.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.DiagnosticLevel">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.ObfuscationConfiguration">
            <summary>
            Gets the obfuscation configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.Log(System.Diagnostics.TraceLevel,System.String,System.String,System.Guid,System.Guid,Microsoft.Graph.Communications.Common.Telemetry.LogEventType,System.Collections.Generic.IEnumerable{System.Object},System.String,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.Subscribe(System.IObserver{Microsoft.Graph.Communications.Common.Telemetry.LogEvent})">
            <summary>
            Create a subscription for logging events.
            </summary>
            <param name="observer">The object that is to receive notifications.</param>
            <returns>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLogger.OnNext(Microsoft.Graph.Communications.Common.Telemetry.LogEvent)">
            <summary>
            Default log event handler.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim">
            <summary>
            The graph logger shim.
            This wrapper on the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger"/>
            attaches some extra data to each log request.
            </summary>
            <seealso cref="T:Microsoft.Graph.Communications.Common.ObjectRoot" />
            <seealso cref="T:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger" />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.#ctor(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.Nullable{System.Guid},System.Collections.Generic.IEnumerable{System.Object},Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim" /> class.
            </summary>
            <param name="graphLogger">The graph logger.</param>
            <param name="component">The component.</param>
            <param name="correlationId">The correlation identifier. If null, shim will use the correlationId from GraphLogger</param>
            <param name="properties">The properties.</param>
            <param name="obfuscationConfiguration">The obfuscation configuration.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.Properties">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.DiagnosticLevel">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.ObfuscationConfiguration">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.CorrelationId">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.LogicalThreadId">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.Subscribe(System.IObserver{Microsoft.Graph.Communications.Common.Telemetry.LogEvent})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.Log(System.Diagnostics.TraceLevel,System.String,System.String,System.Guid,System.Guid,Microsoft.Graph.Communications.Common.Telemetry.LogEventType,System.Collections.Generic.IEnumerable{System.Object},System.String,System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerShim.ConcatProperties(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Merges the properties.
            </summary>
            <param name="properties1">The properties1.</param>
            <param name="properties2">The properties2.</param>
            <returns>The merged properties.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerWrapper">
            <summary>
            The ILogger wrapper for IGraphLogger.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerWrapper.logFunction">
            <summary>
            Graph logger
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerWrapper.#ctor(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.Guid,Microsoft.Graph.Communications.Common.Telemetry.LogEventType,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerWrapper" /> class.
            </summary>
            <param name="graphLogger">Graph logger instance</param>
            <param name="component">The component in which log is created</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="eventType">Log event type</param>
            <param name="properties">Extra properties for the log event</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerWrapper.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerWrapper.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.GraphLoggerWrapper.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.BaseFilter`2">
            <summary>
            Base filter.
            </summary>
            <typeparam name="T1">Type of input for the filter.</typeparam>
            <typeparam name="T2">Return value for the evaluator.</typeparam>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.BaseFilter`2.MatchableString">
            <summary>
            Gets or sets the string for which this filter is a match.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.BaseFilter`2.MatchEvaluator">
            <summary>
            Gets or sets the match evaluator that converts the input value to
            target value.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.BaseFilter">
            <summary>
            Non generic base filter.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentDispositionFilter">
            <summary>
            Does match of content disposition header. If content disposition matches filter then whole body is removed.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentDispositionFilter.#ctor(System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentDispositionFilter"/> class.
            </summary>
            <param name="matchableString">Name of the matchable content disposition.</param>
            <param name="matchEvaluator">The match evaluator.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentDispositionFilter.IsContentDispositionMatch(System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentDispositionFilter},System.Net.Http.HttpContent,System.String@)">
            <summary>
            Determines whether [is content disposition match] [the specified filters].
            </summary>
            <param name="filters">The filters.</param>
            <param name="content">The content.</param>
            <param name="outputMessage">The output message.</param>
            <returns>
              <c>true</c> if [is content disposition match] [the specified filters]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentTypeFilter">
            <summary>
            Does match of content-type header. If content-type matches filter then whole body is removed.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentTypeFilter.#ctor(System.String,System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentTypeFilter"/> class.
            </summary>
            <param name="matchableContentTypeMediaType">Type of the matchable content type media.</param>
            <param name="matchEvaluator">The match evaluator.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentTypeFilter.IsContentTypeMatch(System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentTypeFilter},System.Net.Http.HttpContent,System.String@)">
            <summary>
            Determines whether [is content type match] [the specified filters].
            </summary>
            <param name="filters">The filters.</param>
            <param name="content">The content.</param>
            <param name="outputMessage">The output message.</param>
            <returns>
              <c>true</c> if [is content type match] [the specified filters]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.GraphUriFilters">
            <summary>
            Uri filters to filter PII in graph urls.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.GraphUriFilters.ChatUriFilters">
            <summary>
            Gets the chat URI filters.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.HeaderFilter">
            <summary>
            Header filters act as whitelists.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.HeaderFilter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.HeaderFilter"/> class.
            </summary>
            <param name="matchableHeaderName">Name of the matchable header.</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.UriFilter">
            <summary>
            URI Filter. Any group matches from REGEX are obfuscated.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.UriFilter.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.UriFilter"/> class.
            </summary>
            <param name="matchableSubtring">The matchable REGEX. Use captures
            for obfuscation. Use obfuscation tag names as group names for specific object</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData">
            <summary>
            The log data for http trace.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.TransactionDirection">
            <summary>
            Gets or sets the transaction direction.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.TraceType">
            <summary>
            Gets or sets the trace type.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.Url">
            <summary>
            Gets or sets the url.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.Method">
            <summary>
            Gets or sets the method.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.HeadersString">
            <summary>
            Gets the headers string.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.Content">
            <summary>
            Gets or sets the content.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.ResponseStatusCode">
            <summary>
            Gets or sets the response status code.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.ResponseTime">
            <summary>
            Gets or sets the response time in milliseconds.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpLogData.TenantId">
            <summary>
            Gets or sets the tenant id for the request.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpObfuscationHelpers">
            <summary>
            Static class that provides helper functions for HTTP Logging.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpObfuscationHelpers.LogHeaderText(Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Logs the header text.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="headers">The headers.</param>
            <returns>
            The obfuscated header and value pairs.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpObfuscationHelpers.LogHeaderText(Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Logs the header text.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="headerName">Name of the header.</param>
            <param name="headerValues">The header values.</param>
            <returns>
            The obfuscated header and value pair.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.HttpObfuscationHelpers.GetUrlText(System.Uri,System.Boolean,System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.UriFilter},Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine)">
            <summary>
            Converts the URL to its representation depending on the filters.
            </summary>
            <param name="url">The URL.</param>
            <param name="obfuscationEnabled">if set to <c>true</c> [filter pii].</param>
            <param name="uriFilters">The URI filters.</param>
            <param name="engine">Custom obfuscation engine. If null, use
            (redacted)</param>
            <returns>
            String representation
            </returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.TransactionDirection">
            <summary>
            Direction for request message.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.TransactionDirection.Incoming">
            <summary>
            The incoming request message.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.TransactionDirection.Outgoing">
            <summary>
            The outgoing request message.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.HttpTraceType">
            <summary>
            Trace used for HTTP traces.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.HttpTraceType.HttpRequest">
            <summary>
            The HTTP request type
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.HttpTraceType.HttpResponse">
            <summary>
            The HTTP response type.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.LogEventType">
            <summary>
            Log event type that describes what type
            of <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.LogEvent"/> this is.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventType.Trace">
            <summary>
            The event used to track Traces.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventType.HttpTrace">
            <summary>
            The event used to track HTTP Calls.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventType.Metric">
            <summary>
            The event used to track metrics
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger">
            <summary>
            The logger interface used by Graph Services. This
            logger emits logs that can be observed by different
            observers.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger.DiagnosticLevel">
            <summary>
            Gets or sets the diagnostic level for the logger.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger.ObfuscationConfiguration">
            <summary>
            Gets the obfuscation configuration.
            This is used to obfuscate PII and other data.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger.CorrelationId">
            <summary>
            Gets or sets the correlation identifier. This is used
            to track correlation between multiple requests for one scenario.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger.LogicalThreadId">
            <summary>
            Gets or sets the logical thread identifier.
            This id is used for tracking the flow of one request throughout
            the lifetime until it ends.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger.Properties">
            <summary>
            Gets the properties of the logger.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger.Log(System.Diagnostics.TraceLevel,System.String,System.String,System.Guid,System.Guid,Microsoft.Graph.Communications.Common.Telemetry.LogEventType,System.Collections.Generic.IEnumerable{System.Object},System.String,System.String,System.Int32)">
            <summary>
            Log messages classified as the provided trace level.
            </summary>
            <param name="level">The trace level.</param>
            <param name="message">A composite format string that includes one or more format items.</param>
            <param name="component">The component in which log is created</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="requestId">The request identifier.</param>
            <param name="eventType">Log event type</param>
            <param name="properties">Extra properties for the log event</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            Log Event object.
            </returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.ILogEventFormatter">
            <summary>
            Interface to format log event.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.ILogEventFormatter.Format(Microsoft.Graph.Communications.Common.Telemetry.LogEvent)">
            <summary>
            Format the log event.
            </summary>
            <param name="logEvent">The log event</param>
            <returns>The formatted text.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.JsonConverters">
            <summary>
            Json converters.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.JsonConverters.TypedPropertiesConverter">
            <summary>
            The json converter for Type.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.JsonConverters.TypedPropertiesConverter.CanRead">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.JsonConverters.TypedPropertiesConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.JsonConverters.TypedPropertiesConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.JsonConverters.TypedPropertiesConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.LogEvent">
            <summary>
            Log data
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.Level">
            <summary>
            Gets or sets the trace level of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.Timestamp">
            <summary>
            Gets or sets the Timestamp of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.CorrelationId">
            <summary>
            Gets or sets the correlation id
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.LogicalThreadId">
            <summary>
            Gets or sets the logical thread identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.RequestId">
            <summary>
            Gets or sets the request identifier.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.Component">
            <summary>
            Gets or sets the component in which the log is created.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.Message">
            <summary>
            Gets or sets the Description of the event.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.Properties">
            <summary>
            Gets or sets the Custom properties for the event.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.PropertiesString">
            <summary>
            Gets the custom properties in string format.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.CallerInfo">
            <summary>
            Gets or sets the caller information
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.ManagedThreadId">
            <summary>
            Gets or sets the thread ID.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.ProcessId">
            <summary>
            Gets or sets the process ID.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.LogEvent.CallerInfoString">
            <summary>
            Gets the caller information string.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags">
            <summary>
            The log event formatter enums
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.IncludesCallInfo">
            <summary>
            Call info
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.IncludesComponent">
            <summary>
            Component
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.IncludesCorrelationId">
            <summary>
            Correlation ID
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.IncludesLevel">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.IncludeManagedThreadId">
            <summary>
            Managed thread ID
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.IncludeProcessId">
            <summary>
            Process ID
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.IncludesProperties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.IncludesTimestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.ForDefault">
            <summary>
            For default case, which includes all fields.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags.ForILoggerFactory">
            <summary>
            For ILoggerFactory binding format, which doesn't include component and level, as these fields are set in ILogger outside of message.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.LogEventFieldPositions">
            <summary>
            The log event field positions
            </summary>
            <remarks>
            The BuildMessageTemplate and Format functions rely on this enum default behavior (value is increased continously and start from 0)
            to make sure the string.Format() in Format function works properly.
            The sequence of the enum values will be used for the string.Format() parameter sequence.
            </remarks>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFieldPositions.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFieldPositions.Level">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFieldPositions.CorrelationId">
            <summary>
            Correlation ID
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFieldPositions.Component">
            <summary>
            Component
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFieldPositions.ProcessId">
            <summary>
            Process ID
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFieldPositions.ManagedThreadId">
            <summary>
            Managed thread ID
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFieldPositions.CallInfo">
            <summary>
            Call Info
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFieldPositions.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFieldPositions.Properties">
            <summary>
            Properties
            </summary>
            <remarks>
            It must be the last one in the enumeration as the format logic depends on that to get total count of enumeration.
            </remarks>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatter">
            <summary>
            The log event formatter
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatter.DefaultTimestampFormat">
            <summary>
            The default timestamp format.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatter.#ctor(Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatterFlags,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatter"/> class.
            </summary>
            <param name="flags">The formatter flags to control which will be shown in output message.</param>
            <param name="inlineSeparator">The inline separator for logging fields</param>
            <param name="timestampFormat">The default timestamp format</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatter.Format(Microsoft.Graph.Communications.Common.Telemetry.LogEvent)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatter.BuildMessageTemplates">
            <summary>
            Build the message templates.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LogEventFormatter.IsFieldIncluded(System.Int32)">
            <summary>
            Check if the flags are included already.
            </summary>
            <param name="fieldPosition">The field position to check</param>
            <returns>A value indidating whether the flags are included.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants">
            <summary>
            Constants used for logging that are common
            between server and client.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.AuthMetrics">
            <summary>
            The namespace of auth metrics
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.ClientCertValidation">
            <summary>
            The metric name for client cert validation
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.RequestId">
            <summary>
            The request ID (used to identify request-response pair)
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.HTTPMetrics">
            <summary>
            The namespace of HTTP metrics
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.ResponseTimeInMilliseconds">
            <summary>
            The metric name of HTTP response time
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.OnlineMeeting">
            <summary>
            The metric name of Online Meeting
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.RequestPath">
            <summary>
            Request path dimension name.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.StatusCode">
            <summary>
            StatusCode dimension name.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.Method">
            <summary>
            Method dimension name.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.UserAgent">
            <summary>
            UserAgent dimension name.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.Partner">
            <summary>
            Partner dimension name.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.Operation">
            <summary>
            Operation dimension name.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.PropertyDoesNotExist">
            <summary>
            Property does not exist error message
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.JsonSerializationMaxDepth">
            <summary>
            Max depth of json serializer in case the json serializer settings is configured as ReferenceLoopHandling.Serialize
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.AppId">
            <summary>
            AppId constant.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.ObjectId">
            <summary>
            UserId constant.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.TenantId">
            <summary>
            Tenant Id constant.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.ReplaceId">
            <summary>
            The constant pointing to the replace id to be used for Api Path.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.SuccessfulBridgedMessages">
            <summary>
            Successful bridged messages constant.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.FailedBridgedMessages">
            <summary>
            Failed bridged messages constant.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.FailedChatNotifications">
            <summary>
            The failed chat notifications
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.SuccessfulChatNotifications">
            <summary>
            The successful chat notifications
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.ChatId">
            <summary>
            Chat Id.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.PartitionKey">
            <summary>
            Partition Id.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.InstanceId">
            <summary>
            Instance ID.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.FailedChatInactivityTracking">
            <summary>
            The failed chat inactivity tracking
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.SuccessfulChatInactivityTracking">
            <summary>
            The successful chat inactivity tracking
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.SuccessfulChatInactivityTrackingSum">
            <summary>
            The successful chat inactivity tracking sum.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.FailedChatInactivityTrackingSum">
            <summary>
            The failed chat inactivity tracking sum
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.TotalChatInactivityTracking">
            <summary>
            The total chat inactivity tracking
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.ActivityTrackingLatencySeconds">
            <summary>
            The activity tracking latency in seconds
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.ChatInactivityTrackingExceedingInterval">
            <summary>
            The chat inactivity tracking that exceeds the expected interval
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.OutgoingChatMessageLatency">
            <summary>
            The time taken to send outgoing message.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.RoutingCacheRequests">
            <summary>
            The routing cache requests.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.FailedRoutingCacheRequests">
            <summary>
            The failed routing cache requests.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.ErrorCode">
            <summary>
            The error code.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.Result">
            <summary>
            The result.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.CosmosDBRequestLatency">
            <summary>
            The metric name of CosmosDB request latency in milliseconds
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.CosmosDBRequestCharge">
            <summary>
            The metric name of CosmosDB request charge
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.CosmosDBCollection">
            <summary>
            The name of CosmosDB collection
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.CosmosDBRequestType">
            <summary>
            The CosmosDB request type, read/create/update/upsert/delete/query
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.APIVersion">
            <summary>
            The API version of the request
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.OnlineMeetingUrl">
            <summary>
            The Url of Online Meeting
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.IsOnlineMeetingVtcId">
            <summary>
            If the API is creating/getting online meetings via vtc id
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.OnlineMeetingAction">
            <summary>
            Online meeting API action (Create/Retrieve...etc)
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.LoggingConstants.IsUserToken">
            <summary>
            If the API is operating on resources using user token
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions">
            <summary>
            Extensions class for logging.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Log(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Diagnostics.TraceLevel,System.Exception,System.String,System.String,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Log exceptions.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The trace level.</param>
            <param name="exception">Exception information.</param>
            <param name="message">The message.</param>
            <param name="component">The component in which log is created</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            Log Event object.
            </returns>
            TODO bodogado/Vinay simplify overloads.
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Error(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Exception,System.String,System.String,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Log exceptions with error level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">Exception information.</param>
            <param name="message">The message.</param>
            <param name="component">The component in which log is created</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            Log Event object.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Error(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.String,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Log messages with error level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="component">The component in which log is created</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            Log Event object.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Info(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.String,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Log exceptions with info level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="component">The component in which log is created</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            Log Event object.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Warn(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Exception,System.String,System.String,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Log exceptions with warning level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="exception">Exception information.</param>
            <param name="message">The message.</param>
            <param name="component">The component in which log is created</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            Log Event object.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Warn(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.String,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Log exceptions with warning level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="component">The component in which log is created</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            Log Event object.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Verbose(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.String,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Log verbose level.
            </summary>
            <param name="logger">The logger.</param>
            <param name="message">The message.</param>
            <param name="component">The component in which log is created</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            Log Event object.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.LogHttpMessage(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Diagnostics.TraceLevel,Microsoft.Graph.Communications.Common.Telemetry.TransactionDirection,Microsoft.Graph.Communications.Common.Telemetry.HttpTraceType,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}},System.Int32,System.String,System.Nullable{System.Int64},System.Guid,System.Guid,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Logs the http message.
            </summary>
            <param name="logger">The logger.</param>
            <param name="level">The trace level.</param>
            <param name="direction">The direction for request.</param>
            <param name="traceType">Type of the http trace.</param>
            <param name="url">The URL.</param>
            <param name="method">The method.</param>
            <param name="obfuscatedContent">The obfuscatedContent.</param>
            <param name="headers">The headers.</param>
            <param name="responseCode">The response code. (used only if [traceType == HttpResponse])</param>
            <param name="component">The component in which log is created.</param>
            <param name="responseTime">The response time. (used only if [traceType == HttpResponse])</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="requestId">The message identifier.</param>
            <param name="tenantId">The tenant id for the request.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            Log Event object
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Metric(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.String,System.Int64,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,System.String,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Log metrics
            </summary>
            <param name="logger">The logger.</param>
            <param name="metricNamespace">Metric namespace</param>
            <param name="metricName">Metric name</param>
            <param name="rawData">Raw data</param>
            <param name="dimensions">Dimension name-value dictionary</param>
            <param name="addDefaultDimension">Indicates whether adds default dimension</param>
            <param name="component">The component in which log is created</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>
            Log Event object.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.SerializeAndObfuscate(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Object,Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the payload and obfuscates it.
            </summary>
            <param name="logger">The logger.</param>
            <param name="payload">The payload.</param>
            <param name="formatting">The formatting.</param>
            <returns>Obfuscated data.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Obfuscate(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Object,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag)">
            <summary>
            Obfuscates the specified payload with the tag.
            </summary>
            <param name="logger">The logger.</param>
            <param name="payload">The payload.</param>
            <param name="obfuscationTag">The obfuscation tag.</param>
            <returns>
            Obfuscated data
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.GetHeaderText(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Logs the headers text.
            </summary>
            <param name="logger">The logger.</param>
            <param name="headers">The headers.</param>
            <returns>
            Log Text
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.CreateShim(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.Nullable{System.Guid},System.Collections.Generic.IEnumerable{System.Object},Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration)">
            <summary>
            Creates the shim graph logger.
            The shim <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger" /> wraps this logger and
            appends the specified content to each log request.
            </summary>
            <param name="logger">The logger.</param>
            <param name="component">The component for which log is created.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="properties">Extra properties for the log event</param>
            <param name="obfuscationConfiguration">The obfuscation configuration.</param>
            <returns>
            The <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger" /> shim.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.CreateILogger(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.String,System.Guid,Microsoft.Graph.Communications.Common.Telemetry.LogEventType,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates the ILogger interface from Logging abstractions.
            </summary>
            <param name="logger">The logger.</param>
            <param name="component">The component for which log is created.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="eventType">Log event type</param>
            <param name="properties">Extra properties for the log event</param>
            <returns>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> interface.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.BindToILoggerFactory(Microsoft.Graph.Communications.Common.Telemetry.GraphLogger,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Graph.Communications.Common.Telemetry.ILogEventFormatter)">
            <summary>
            Bind to ILogger
            </summary>
            <param name="graphLogger">The graph logger</param>
            <param name="loggerFactory">The ILogger</param>
            <param name="formatter">The message formatter</param>
            <returns>The observer of graph logger</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.ToLogLevel(System.Diagnostics.TraceLevel)">
            <summary>
            Get log level from trace level.
            </summary>
            <param name="level">The trace level</param>
            <returns>The log level</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.ToTraceLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Gets the tracelevel for log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <returns>trace level</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.GetTypedProperties(Microsoft.Graph.Communications.Common.Telemetry.LogEvent,System.Type)">
            <summary>
            Gets the client common properties from log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <param name="type">The type of the property.</param>
            <returns>
            The client common properties.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.GetTypedProperty``1(Microsoft.Graph.Communications.Common.Telemetry.LogEvent)">
            <summary>
            Gets the client common properties from log event.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="logEvent">The log event.</param>
            <returns>
            The client common properties.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Concat(System.Collections.Generic.IReadOnlyDictionary{System.Type,System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Get the merged propertied.
            </summary>
            <param name="properties">The property collection.</param>
            <param name="additionalProperties">The additional property collection.</param>
            <returns>The merged property collection.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.Flatten(System.Collections.Generic.IReadOnlyDictionary{System.Type,System.Object},System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Get the flatten key-value pairs for the properties of LogEvent.
            </summary>
            <param name="properties">The properties</param>
            <param name="ignoreTypes">The types in this list will be ingored</param>
            <param name="ignoreSubProperties">The property members of specific types in this list will be ingored</param>
            <returns>The flattern result.</returns>
            <remarks>
            The primitive types and types implemented IEnumerable (string, list, dictionary, etc) will keep original value.
            The flatten support one level property lookup only.
            </remarks>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.EnterMethod(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Log for entering method.
            </summary>
            <param name="logger">The logger.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>Log Event object.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.LoggingExtensions.LeaveMethod(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,System.Guid,System.String,System.String,System.Int32)">
            <summary>
            Log for leaving method.
            </summary>
            <param name="logger">The logger.</param>
            <param name="correlationId">The correlation identifier.</param>
            <param name="memberName">Calling function.</param>
            <param name="filePath">File name where code is located.</param>
            <param name="lineNumber">Line number where code is located.</param>
            <returns>Log Event object.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.MetricLogData">
            <summary>
            The metric of Geneva Instrumentation Framework (Ifx).
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.MetricLogData.Namespace">
            <summary>
            Gets or sets the namespace.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.MetricLogData.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.MetricLogData.RawData">
            <summary>
            Gets or sets the raw data.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.MetricLogData.Dimensions">
            <summary>
            Gets or sets the dimensions.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.MetricLogData.AddDefaultDimension">
            <summary>
            Gets or sets a value indicating whether the default dimensions are included.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationAttribute">
            <summary>
            Attribute used for decoration of data objects.
            This is used for obfuscation for logging.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationAttribute.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver">
            <summary>
            Newtonsoft JSON resolver that uses Graph Obfuscation attribute
            to serialize data for logging purposes.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.CachedHasExtensionData">
            <summary>
            Cache the extension data lookup for each type.
            This is called for each object being serialized, the
            values don't change, and we save on reflection.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.CachedMemberTags">
            <summary>
            Cache the obfuscation tags for a given member.
            This is called for each member being serialized, the
            values don't change, and we save on reflection.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.CachedTypeNames">
            <summary>
            Cache serializable name for a given type.
            This is called for each type being serialized, the values don't
            change, and we save using reflection to check on attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.CachedPropertyTags">
            <summary>
            Cache the obfuscation tag for a given additional data key.
            This is called for each key in additional data, the
            results don't change, and we save on processing logic.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.#ctor(Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine,System.Boolean,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver" /> class.
            </summary>
            <param name="engine">The obfuscation engine.</param>
            <param name="addOdataType">If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property.</param>
            <param name="members">
            The predefined set of obfuscation members.
            When specified this <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver"/> will cache the members
            and check the cache for the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag"/>.
            </param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.ResolveContract(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.GetNameFromType(System.Type)">
            <summary>
            Gets the name from the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>The member name.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver.GetTagFromPropertyName(System.String)">
            <summary>
            Gets the obfuscation tag from the property name.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The obfuscation tag if obfuscating, null otherwise.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationConfiguration">
            <summary>
            The hashing obfuscation configuration.
            This configurations is preconfigured to use the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine"/>
            and provides logic to automatically generate a salt which resets daily.
            </summary>
            <seealso cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration" />
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationConfiguration.lastSaltReset">
            <summary>
            The last salt reset
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationConfiguration.salt">
            <summary>
            The salt
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationConfiguration.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.BaseFilter},System.Boolean,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationConfiguration"/> class.
            </summary>
            <param name="filters">The filters.</param>
            <param name="addOdataType">If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property.</param>
            <param name="members">
            The predefined set of obfuscation members.
            When specified the obfuscation serializer will cache the members
            and check the cache for the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag"/>.
            </param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationConfiguration.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.HeaderFilter},System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentDispositionFilter},System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentTypeFilter},System.Boolean,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationConfiguration"/> class.
            </summary>
            <param name="headerFilters">The header filters.</param>
            <param name="contentDispositionFilters">The content disposition filters.</param>
            <param name="contentTypeFilters">The content type filters.</param>
            <param name="addOdataType">If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property.</param>
            <param name="members">
            The predefined set of obfuscation members.
            When specified the obfuscation serializer will cache the members
            and check the cache for the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag"/>.
            </param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationConfiguration.SaltProvider">
            <summary>
            Provides the hashing obfuscation salt.
            </summary>
            <returns>The salt.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine">
            <summary>
            Obfuscation engine that hashes PII using salt.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.#ctor(System.Func{System.Byte[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine"/> class.
            </summary>
            <param name="saltProvider">The salt provider.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.Enabled">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.ObfuscationConfiguration">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.HashAlgorithm">
            <summary>
            Gets or sets the hash algorithm.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.HashLength">
            <summary>
            Gets or sets the length of the hashed payload. Set this to -1 for full salt.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.SaltProvider">
            <summary>
            Gets or sets the salt provider.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.Obfuscate(System.Object,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.GetHashedString(System.Object,System.Nullable{System.Int32})">
            <summary>
            Gets the hashed string given the payload.
            </summary>
            <param name="originalPayload">The original payload.</param>
            <param name="hashLength">Length of the hash.</param>
            <returns>
            Hashed value.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.GetHashedGuid(System.Object)">
            <summary>
            Generates the hashed unique identifier.
            </summary>
            <param name="originalPayload">The original payload.</param>
            <returns>Hashed Guid</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.HashingObfuscationEngine.GenerateSaltedHash(System.Byte[],System.Byte[])">
            <summary>
            Generates the salted hash.
            </summary>
            <param name="plainText">The plain text.</param>
            <param name="salt">The salt.</param>
            <returns>Salted hash</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine">
            <summary>
            Obfuscation engine that can obfuscate data.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine.Enabled">
            <summary>
            Gets a value indicating whether obfuscation is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine.ObfuscationConfiguration">
            <summary>
            Gets or sets the obfuscation configuration.
            This is also set when configuration is linked to an
            obfuscation engine.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine.Obfuscate(System.Object,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag)">
            <summary>
            Obfuscates the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <param name="obfuscationTag">The obfuscation tag.</param>
            <returns>Obfuscated data.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscatedValueProvider">
            <summary>
            Newtonsoft JSONs value provider for obfuscated data.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscatedValueProvider.#ctor(System.Reflection.MemberInfo,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscatedValueProvider" /> class.
            </summary>
            <param name="memberInfo">The member information.</param>
            <param name="obfuscationEngine">The obfuscation engine.</param>
            <param name="obfuscationTag">The obfuscation tag.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscatedValueProvider.SetValue(System.Object,System.Object)">
            <summary>Sets the value.</summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscatedValueProvider.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration">
            <summary>
            Configuration for obfuscation of different parts.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.#ctor(Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine,System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.BaseFilter},System.Boolean,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration" /> class.
            </summary>
            <param name="engine">The obfuscation engine.</param>
            <param name="filters">The filters.</param>
            <param name="addOdataType">If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property.</param>
            <param name="members">
            The predefined set of obfuscation members.
            When specified the obfuscation serializer will cache the members
            and check the cache for the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag"/>.
            </param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.#ctor(Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine,System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.HeaderFilter},System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentDispositionFilter},System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Telemetry.HttpLogging.Filters.ContentTypeFilter},System.Boolean,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration" /> class.
            </summary>
            <param name="engine">The obfuscation engine.</param>
            <param name="headerFilters">The header filters.</param>
            <param name="contentDispositionFilters">The content disposition filters.</param>
            <param name="contentTypeFilters">The content type filters.</param>
            <param name="addOdataType">If true, attach the @odata.type property, otherwise only attach this property if it's already present as a first class property.</param>
            <param name="members">
            The predefined set of obfuscation members.
            When specified the obfuscation serializer will cache the members
            and check the cache for the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag"/>.
            </param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.DefaultUriFilters">
            <summary>
            Gets the default header filters.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.DefaultContentTypeFilters">
            <summary>
            Gets the default content type filters.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.DefaultContentDispositionFilters">
            <summary>
            Gets the default content disposition filters.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.DefaultHeaderFilters">
            <summary>
            Gets the default header filters which are not redacted
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.ObfuscationEngine">
            <summary>
            Gets the obfuscation engine.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.ObfuscationMembers">
            <summary>
            Gets the obfuscation members.
            When specified the obfuscation serializer will cache the members
            and check the cache for the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag"/>.
            This can be used to cache obfuscation attributes, but it can also be used
            in cases where original contracts are not redily available (such as in SDK).
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.ObfuscationSerializerSettings">
            <summary>
            Gets the obfuscation serializer settings.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.ContentDispositionFilters">
            <summary>
            Gets the content disposition filters.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.ContentTypeFilters">
            <summary>
            Gets the content type filters.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.HeaderFilters">
            <summary>
            Gets the header filters.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.UriFilters">
            <summary>
            Gets the URI filters.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationConfiguration.SetObfuscationEngine(Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.IObfuscationEngine,System.Boolean,Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember[])">
            <summary>
            Sets the obfuscation engine.
            </summary>
            <param name="engine">The obfuscation engine.</param>
            <param name="addOdataType">If true, attach the @odata.type property, otherwise only attach this property if it is already present.</param>
            <param name="members">The obfuscation members.</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember">
            <summary>
            The obfuscation member.
            This struct is used to generate an obfuscation schema
            for any <b>class</b> type or it's members.
            It can be passed into the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.GraphObfuscationContractResolver"/>
            which will cache the schema when resolving object and member obfuscation.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember.Name">
            <summary>
            Gets or sets the name of the member.
            For classes this should be type full name,
            for members this should be the member name.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember.Tag">
            <summary>
            Gets or sets the obfuscation tag.
            Specifies how this member should be obfuscated.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember.Members">
            <summary>
            Gets or sets the members belonging to this member.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationSerializer">
            <summary>
            The obfuscation serializer can be used to serialize and
            de-serialize an obfuscation schema, as well as generate
            a schema from specified assemblies.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationSerializer.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationSerializer"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationSerializer.Members">
            <summary>
            Gets or sets the members belonging to the class.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationSerializer.ExtractFromAssemblies(System.Reflection.Assembly[])">
            <summary>
            Extracts the obfuscation members from the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies.</param>
            <returns>
            The list of <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember" /> stucts extracted from the specified assemblies.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationSerializer.GenerateSchema(Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationMember[])">
            <summary>
            Generates the schema from the specified obfuscation members.
            </summary>
            <param name="members">The obfuscation classes.</param>
            <returns>The schema associated with the specified classes.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationSerializer.LoadFromSchema(System.String)">
            <summary>
            Loads the obfuscations classes from the specified schema.
            </summary>
            <param name="schema">The schema.</param>
            <returns>The loaded obfuscation classes.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag">
            <summary>
            Tag used to provide a hint for the type of obfuscation to perform.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag.Generic">
            <summary>
            A generic blob containing sensitive data that must be obfuscated completely.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag.Pstn">
            <summary>
            PSTN related information. An example would be a telephone number like "+10005559999".
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag.Identity">
            <summary>
            The subject of some information whose data needs to be obfuscated. An example would be
            "The user {coolgal} is attempting to to perform some action".
            MRIs are also considered identities.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag.Uri">
            <summary>
            Uri that needs to be obfuscated. This can have any scheme like http, https, etc. An example
            would be "https://cheatdays.com/fitguy"
            This could be either absolute or relative uri.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag.Fqdn">
            <summary>
            FQDN that needs to be obfuscated. An example would be "lyncfrontend.lync.com"
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag.IpAddress">
            <summary>
            IP address that needs to be obfuscated. An example would be "187.23.33.1"
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Telemetry.Obfuscation.ObfuscationTag.Guid">
            <summary>
            A guid type that has to be obfuscated.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphRequestExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphRequestExtensions.ToHttpRequestMessage``1(Microsoft.Graph.Communications.Common.Transport.IGraphRequest{``0},Newtonsoft.Json.JsonSerializerSettings,System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Transport.IGraphProperty})">
            <summary>
            Converts <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest" /> into a <see cref="T:System.Net.Http.HttpRequestMessage" />.
            </summary>
            <typeparam name="T"><see cref="T:System.Type" /> of content available in the request.</typeparam>
            <param name="graphRequest">The graph request to be converted.</param>
            <param name="jsonSerializerSettings">The json serializer settings.</param>
            <param name="defaultProperties">The default properties.</param>
            <returns>
              <see cref="T:System.Net.Http.HttpRequestMessage" /> corresponding to <paramref name="graphRequest" />.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphRequestExtensions.ToHttpMethod(Microsoft.Graph.Communications.Common.Transport.RequestType)">
            <summary>
            Convert RequestType to the corresponding HTTP method.
            </summary>
            <param name="requestType">Type of the request.</param>
            <returns>HttpMethod for the RequestType</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphRequestExtensions.AddProperties(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Transport.IGraphProperty})">
            <summary>
            Adds the properties to the specified request
            </summary>
            <param name="request">The request.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphResponseExtensions">
            <summary>
            Extensions for <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphResponseExtensions.ToHttpResponseMessage``1(Microsoft.Graph.Communications.Common.Transport.IGraphResponse{``0},Newtonsoft.Json.JsonSerializerSettings,System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Transport.IGraphProperty})">
            <summary>
            Converts <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse" /> into a <see cref="T:System.Net.Http.HttpResponseMessage" />.
            </summary>
            <typeparam name="T"><see cref="T:System.Type" /> of content available in the response.</typeparam>
            <param name="graphResponse">The graph response to be converted.</param>
            <param name="jsonSerializerSettings">The json serializer settings.</param>
            <param name="defaultProperties">The default properties.</param>
            <returns>
              <see cref="T:System.Net.Http.HttpResponseMessage" /> corresponding to <paramref name="graphResponse" />.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphResponseExtensions.ToHttpStatus(Microsoft.Graph.Communications.Common.Transport.ResponseStatus)">
            <summary>
            Convert <see cref="T:Microsoft.Graph.Communications.Common.Transport.ResponseStatus" /> to it's corresponding <see cref="T:System.Net.HttpStatusCode" />.
            </summary>
            <param name="status">The status.</param>
            <returns>
            HttpStatusCode for the ResponseStatus
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphResponseExtensions.AddProperties(System.Net.Http.HttpResponseMessage,System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Transport.IGraphProperty})">
            <summary>
            Adds the properties to the specified request
            </summary>
            <param name="response">The response.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.HttpRequestMessageExtensions">
            <summary>
            Extensions for <see cref="T:System.Net.Http.HttpRequestMessage"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.HttpRequestMessageExtensions.ToGraphRequestAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Converts a <see cref="T:System.Net.Http.HttpRequestMessage"/> into a <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest"/>.
            </summary>
            <param name="httpRequest"><see cref="T:System.Net.Http.HttpRequestMessage"/> to be converted.</param>
            <returns><see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest"/> object corresponding to <paramref name="httpRequest"/></returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.HttpRequestMessageExtensions.ToGraphRequestAsync``1(System.Net.Http.HttpRequestMessage,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Converts a <see cref="T:System.Net.Http.HttpRequestMessage"/> into a <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest`1"/>.
            </summary>
            <param name="httpRequest"><see cref="T:System.Net.Http.HttpRequestMessage"/> to be converted.</param>
            <param name="serializerSettings">Json serializer settings.</param>
            <typeparam name="T"><see cref="T:System.Type"/> of the content present in <paramref name="httpRequest"/></typeparam>
            <returns><see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest`1"/> object corresponding to <paramref name="httpRequest"/></returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.HttpRequestMessageExtensions.CloneHttpRequestMessageAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Clones the HTTP request message.
            </summary>
            <param name="req">The req.</param>
            <returns>Cloned request message</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.HttpRequestMessageExtensions.ToRequestType(System.Net.Http.HttpMethod)">
            <summary>
            Convert HttpMethod to the type of the request.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <returns>RequestType corresponding to the httpMethod</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if httpMethod has no corresponding RequestType</exception>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.HttpRequestMessageExtensions.Add(System.Net.Http.Headers.HttpHeaders,Microsoft.Graph.Communications.Common.Transport.IGraphProperty)">
            <summary>
            Adds the header.
            </summary>
            <param name="headers">The headers.</param>
            <param name="property">The property.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.HttpRequestMessageExtensions.GetHttpAndContentHeaders(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets headers from the http request and the content.
            </summary>
            <param name="message">The message.</param>
            <returns>The list of http and content headers.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.HttpResponseMessageExtensions">
            <summary>
            Extensions for <see cref="T:System.Net.Http.HttpResponseMessage"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.HttpResponseMessageExtensions.ToGraphResponseAsync(System.Net.Http.HttpResponseMessage)">
            <summary>
            Converts <see cref="T:System.Net.Http.HttpResponseMessage"/> to an instance of <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1"/>.
            </summary>
            <param name="httpResponse">HTTP response to be converted.</param>
            <returns><see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse"/> corresponding to <paramref name="httpResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.HttpResponseMessageExtensions.ToGraphResponseAsync``1(System.Net.Http.HttpResponseMessage,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Converts <see cref="T:System.Net.Http.HttpResponseMessage"/> to an instance of <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the expected response.</typeparam>
            <param name="httpResponse">HTTP response to be converted.</param>
            <param name="serializerSettings">Add serializer that can serialize the content.</param>
            <returns><see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1"/> corresponding to <paramref name="httpResponse"/>.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.HttpResponseMessageExtensions.GetOutcomeFromResponseOrException(System.Nullable{System.Int32},System.Exception)">
            <summary>
            Try extracting outcome outcome from HTTP response status code or exception
            </summary>
            <param name="statusCode">HTTP response status code</param>
            <param name="exception">The exception</param>
            <returns>Outcome string</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.HttpResponseMessageExtensions.GetHttpAndContentHeaders(System.Net.Http.HttpResponseMessage)">
            <summary>
            Gets headers from the http response and the content.
            </summary>
            <param name="message">The message.</param>
            <returns>The list of http and content headers.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1">
            <inheritdoc cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty`1" />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1.#ctor(System.String,`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1"/> struct.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1.#ctor(Microsoft.Graph.Communications.Common.Transport.IGraphProperty{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1"/> struct.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1.Key">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1.Value">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1.Microsoft#Graph#Communications#Common#Transport#IGraphProperty#Value">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1.Equals(Microsoft.Graph.Communications.Common.Transport.IGraphProperty)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphProperty">
            <summary>
            The <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty"/> helpers and extensions.
            </summary>
            <seealso cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty`1" />
            <seealso cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty" />
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.GraphProperty.RequestType">
            <summary>
            The request type
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.GraphProperty.ContentType">
            <summary>
            The content type
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.GraphProperty.PropertyMethod">
            <summary>
            The property method.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.GraphProperty.AddMethod">
            <summary>
            The property method.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.ConvertProperty``1(Microsoft.Graph.Communications.Common.Transport.IGraphProperty)">
            <summary>
            Converts the property.
            </summary>
            <typeparam name="T">The type of value expected.</typeparam>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty`1"/> with the expected generic type if the types match, null otherwise.</returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.RequestProperty``1(System.String,``0)">
            <summary>
            Creates the property of `request` type.
            </summary>
            <typeparam name="T">The type of the property to create.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            The request <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty`1"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.RequestProperty(System.String,System.Object)">
            <summary>
            Creates the property of `request` type.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            The request <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.ContentProperty``1(System.String,``0)">
            <summary>
            Creates the property of `content` type.
            </summary>
            <typeparam name="T">The type of the property to create.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The values.</param>
            <returns>
            The content <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty`1"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.ContentProperty(System.String,System.Object)">
            <summary>
            Creates the property of `content` type.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The values.</param>
            <returns>
            The content <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.Property``1(System.String,``0,System.String)">
            <summary>
            Creates a property of the specified type.
            </summary>
            <typeparam name="T">The type of the property to create.</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>
            The created <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty`1"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.Property(System.String,System.Object,System.String)">
            <summary>
            Creates a property of the specified type.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The values.</param>
            <param name="type">The type.</param>
            <returns>
            The created <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.Add``1(System.Collections.Generic.ICollection{Microsoft.Graph.Communications.Common.Transport.IGraphProperty},System.String,``0,System.String)">
            <summary>
            Adds the property to the exchange.
            </summary>
            <typeparam name="T">The expected type of the property.</typeparam>
            <param name="properties">The properties.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>
            The added <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty`1"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.Add(System.Collections.Generic.ICollection{Microsoft.Graph.Communications.Common.Transport.IGraphProperty},System.String,System.Object,System.String)">
            <summary>
            Adds the property to the exchange.
            </summary>
            <param name="properties">The properties.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>
            The added <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.Find``1(System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Transport.IGraphProperty},System.String)">
            <summary>
            Finds the property in the given exchange.
            </summary>
            <typeparam name="T">The expected type of the property.</typeparam>
            <param name="properties">The properties.</param>
            <param name="key">The key.</param>
            <returns>
            The found <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty`1"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.Find(System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Transport.IGraphProperty},System.String)">
            <summary>
            Finds the property in the given exchange.
            </summary>
            <param name="properties">The properties.</param>
            <param name="key">The key.</param>
            <returns>
            The found <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty"/>.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphProperty.Contains(System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Transport.IGraphProperty},System.String)">
            <summary>
            Finds the property in the given exchange.
            </summary>
            <param name="properties">The properties.</param>
            <param name="key">The key.</param>
            <returns>
            The found <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty"/>.
            </returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphRequest">
            <inheritdoc cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest" />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphRequest.#ctor(System.Uri,Microsoft.Graph.Communications.Common.Transport.RequestType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphRequest" /> class.
            Create the graph request object
            </summary>
            <param name="location">The uri location for the request.</param>
            <param name="requestType">Type of the request.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphRequest.#ctor(Microsoft.Graph.Communications.Common.Transport.IGraphRequest{Microsoft.Graph.Communications.Common.Transport.NoContentMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphRequest"/> class.
            </summary>
            <param name="graphRequest">The graph request.</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphRequest`1">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphRequest`1.#ctor(System.Uri,`0,Microsoft.Graph.Communications.Common.Transport.RequestType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphRequest`1" /> class.
            Create the graph request object
            </summary>
            <param name="location">The uri location for the request.</param>
            <param name="content">Content to be sent as part of the request.</param>
            <param name="requestType">Type of the request.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphRequest`1.Content">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphRequest`1.Properties">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphRequest`1.Uri">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphRequest`1.RequestType">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphRequest`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphResponse">
            <inheritdoc cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse" />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphResponse.#ctor(Microsoft.Graph.Communications.Common.Transport.ResponseStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphResponse"/> class.
            Create a new graph response
            </summary>
            <param name="status">Status indicating success/failure/other for the response.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphResponse.#ctor(Microsoft.Graph.Communications.Common.Transport.IGraphResponse{Microsoft.Graph.Communications.Common.Transport.NoContentMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphResponse"/> class. This is a copy constructor.
            </summary>
            <param name="response">The response to be used to create a new instance.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphResponse.#ctor(System.String,Microsoft.Graph.Communications.Common.Transport.ResponseStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphResponse"/> class.
            </summary>
            <param name="errorContent">Content of the error.</param>
            <param name="status">The status.</param>
            <param name="reasonPhrase">The reason phrase.</param>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphResponseException">
            <summary>
            Class representing GraphResponseException
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphResponseException.#ctor(Microsoft.Graph.Communications.Common.Transport.IGraphResponse)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphResponseException"/> class.
            </summary>
            <param name="errorResponse">The error response.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphResponseException.Response">
            <summary>
            Gets the response.
            </summary>
            <value>
            The response.
            </value>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1.#ctor(`0,Microsoft.Graph.Communications.Common.Transport.ResponseStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1"/> class.
            Create a new graph response
            </summary>
            <param name="content">The serialized content of the response.</param>
            <param name="status">Status indicating success/failure/other for the response.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1.#ctor(System.String,Microsoft.Graph.Communications.Common.Transport.ResponseStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1"/> class.
            </summary>
            <param name="errorContent">Content of the error.</param>
            <param name="status">The status.</param>
            <param name="reasonPhrase">The reason phrase.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1.Content">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1.Properties">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1.ReasonPhrase">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1.ErrorContent">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1.Status">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphResponse`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient">
            <summary>
            Graph client that handles transport over http.
            </summary>
            <seealso cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient" />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.#ctor(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,Newtonsoft.Json.JsonSerializerSettings,System.Net.Http.HttpClient,System.Int32,System.String,System.Net.Http.Headers.ProductInfoHeaderValue,System.Collections.Generic.IEnumerable{Microsoft.Graph.Communications.Common.Transport.IGraphProperty},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="jsonSerializerSettings">The json serializer settings.</param>
            <param name="httpClient">The HTTP client.</param>
            <param name="numberOfRetries">The number of retries.</param>
            <param name="correlationIdHeader">The correlation identifier header.</param>
            <param name="userAgent">The user agent.</param>
            <param name="defaultProperties">The default properties.</param>
            <param name="metricName">The metric name.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.GraphLogger">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.DefaultProperties">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.SerializerSettings">
            <summary>
            Gets the serializer settings.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.CustomRedirectUriGenerator">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.InitializeServicePointSettings">
            <summary>
            Initializes global service point settings.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.SendAsync``1(Microsoft.Graph.Communications.Common.Transport.IGraphRequest{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.SendAsync``2(Microsoft.Graph.Communications.Common.Transport.IGraphRequest{``0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.SendRawHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.Clone(System.Net.Http.HttpClient)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.SendHttpRequestAsync``2(Microsoft.Graph.Communications.Common.Transport.IGraphRequest{``0},System.Threading.CancellationToken)">
            <summary>
            Sends the request asynchronously.
            We only retry if the Http request fails with an exception. We do
            not retry in case of error response returned from the request.
            </summary>
            <typeparam name="T1"><see cref="T:System.Type" /> of the content present in the request.</typeparam>
            <typeparam name="T2"><see cref="T:System.Type" /> of the expected content in response.</typeparam>
            <param name="graphRequest">The request to be sent out.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
              <see cref="T:System.Net.Http.HttpResponseMessage" /> received for the <paramref name="graphRequest" />.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.LogRequest(System.Diagnostics.TraceLevel,System.Net.Http.HttpRequestMessage,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Logs the request message.
            </summary>
            <param name="level">The level.</param>
            <param name="httpRequest">The http request to log.</param>
            <param name="content">The response time.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.LogResponse(System.Diagnostics.TraceLevel,System.Net.Http.HttpRequestMessage,System.Int64,System.Net.Http.HttpResponseMessage,System.Object,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            Logs the response message.
            </summary>
            <param name="level">The level.</param>
            <param name="httpRequest">The http request to log.</param>
            <param name="responseTime">The response time.</param>
            <param name="httpResponse">The http response to log.</param>
            <param name="content">The content to log.</param>
            <param name="exception">The exception to log.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.SendRawHttpRequestWithRedirectCountAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Int32,System.Boolean)">
            <summary>
            Sends the raw HTTP request asynchronous.
            See <see cref="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClient.SendRawHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Boolean)" />.
            </summary>
            <param name="httpRequest">The HTTP request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="redirectionCount">The redirection count.</param>
            <param name="logResponse">The flag indicating whether response should be logged.</param>
            <returns>HttpResponse.</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Sending http request has been cancelled.</exception>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphHttpClientContainer">
            <summary>
            This class is used to handle multiple http clients within
            one service. This class extends the concurrent dictionary and
            contains a mapping from a key for the client to the http client
            itself.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClientContainer.#ctor(Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphHttpClientContainer" /> class.
            </summary>
            <param name="defaultGraphHttpClient">The default graph HTTP client.</param>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.GraphHttpClientContainer.DefaultGraphHttpClient">
            <summary>
            Gets the default graph HTTP client.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.GraphHttpClientFactory">
            <summary>
            The HTTP graph client factory.
            </summary>
            <seealso cref="T:Microsoft.Graph.Communications.Common.ObjectRoot" />
            <seealso cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClientFactory" />
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClientFactory.#ctor(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger,Newtonsoft.Json.JsonSerializerSettings,System.Net.Http.HttpClient,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Graph.Communications.Common.Transport.GraphHttpClientFactory" /> class.
            </summary>
            <param name="logger">Logger instance.</param>
            <param name="serializerSettings">The serializer settings.</param>
            <param name="httpClient">The HTTP client.</param>
            <param name="correlationIdHeader">The correlation identifier header.</param>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.GraphHttpClientFactory.Create(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Creates a new <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient"/>.
            </summary>
            <param name="logger">An optional <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger"/> logger
            to be used in the new <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient"/>.</param>
            <returns>The <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient"/>.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.Http.HttpUtils">
            <summary>
            Utilities for Http transport
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.Http.HttpUtils.GetRequestTypeForHttpMethod(System.String)">
            <summary>
            Gets the type of the request for the given http method.
            </summary>
            <param name="httpMethod">The HTTP method.</param>
            <returns>RequestType corresponding to the httpMethod</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if httpMethod has no corresponding RequestType</exception>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient">
            <summary>
            Interface for Http transport client. Gives us a way to
            work with different instances of GraphClient through Dependency Injection.
            </summary>
            <seealso cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient" />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient.CustomRedirectUriGenerator">
            <summary>
            Gets or sets the custom redirect URI generator.
            This is called in case of a redirect (3XX) response from the request.
            Clients can use this to read the response and give the new redirect url to call in the next request.
            </summary>
            <value>The custom redirect URI generator.</value>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient.SendRawHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Send a Http request as an asynchronous operation.
            The content sent using this is not parsed or logged.
            </summary>
            <param name="httpRequest">The http request message to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="logResponse">The flag indicating whether response should be logged.</param>
            <returns>
            The task object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.IGraphHttpClient.Clone(System.Net.Http.HttpClient)">
            <summary>
            Clones this instance with optional overrides.
            </summary>
            <param name="httpClient">The HTTP client to replace the original.</param>
            <returns>Cloned client with the updated properties.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient">
            <summary>
            This class abstracts any communication with
            different services. This client acts at an object
            level rather than wire level and thus providing
            richer experience when working with complex objects.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphClient.GraphLogger">
            <summary>
            Gets the graph logger.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphClient.DefaultProperties">
            <summary>
            Gets the default properties.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.IGraphClient.SendAsync``1(Microsoft.Graph.Communications.Common.Transport.IGraphRequest{``0},System.Threading.CancellationToken)">
            <summary>
            Send a request as an asynchronous operation.
            </summary>
            <typeparam name="TRequest"><see cref="T:System.Type" /> of the content present in the request.</typeparam>
            <param name="request">The request message to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The task object representing the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.IGraphClient.SendAsync``2(Microsoft.Graph.Communications.Common.Transport.IGraphRequest{``0},System.Threading.CancellationToken)">
            <summary>
            Send a request as an asynchronous operation.
            </summary>
            <typeparam name="TRequest"><see cref="T:System.Type" /> of the content present in the request.</typeparam>
            <typeparam name="TResponse"><see cref="T:System.Type" /> of the expected content in response.</typeparam>
            <param name="request">The request message to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            The task object representing the asynchronous operation.
            </returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphClientFactory">
            <summary>
            Interface for factory of <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Communications.Common.Transport.IGraphClientFactory.Create(Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger)">
            <summary>
            Creates a new <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient"/>.
            </summary>
            <param name="logger">An optional <see cref="T:Microsoft.Graph.Communications.Common.Telemetry.IGraphLogger"/> logger
            to be used in the new <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient"/>.</param>
            <returns>The <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient"/>.</returns>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphExchange">
            <summary>
            The base of the exchange of a <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest`1"/> or <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphExchange.Properties">
            <summary>
            Gets the properties of the exchange.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphExchange`1">
            <summary>
            The base of the exchange of a <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest`1"/> or <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the body of exchange.</typeparam>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphExchange`1.Content">
            <summary>
            Gets or sets the content of the exchange.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty">
            <summary>
            The graph property containing request or response data.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphProperty.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphProperty.Type">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphProperty.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphProperty`1">
            <inheritdoc />
            <typeparam name="T">The type of content contained in this property.</typeparam>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphProperty`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest">
            <summary>
            The request object used by the graph sdk.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest`1">
            <summary>
            The request object with content.
            </summary>
            <typeparam name="T"><see cref="T:System.Type" /> of data to be sent as part of request body.</typeparam>
            <seealso cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphExchange`1" />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphRequest`1.Uri">
            <summary>
            Gets the URI location for the request.
            </summary>
            <value>
            The URI.
            </value>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphRequest`1.RequestType">
            <summary>
            Gets the type of the request.
            </summary>
            <value>
            The type of the request.
            </value>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse">
            <summary>
            The response got in exchange of a <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1">
            <summary>
            The response got in exchange of a <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphRequest`1"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of the body of response.</typeparam>
            <seealso cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphExchange`1" />
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1.Status">
            <summary>
            Gets the status of response.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1.ReasonPhrase">
            <summary>
            Gets the reason phrase.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1.ErrorContent">
            <summary>
            Gets the content of the error.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.NoContentMessage">
            <summary>
            <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient"/> requires type parameters for functionality. This is a marked Type/class to make
            function calls to <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphClient"/> indicating we have request/response with no body. The sole
            purpose of this class's existence is to reduce code duplicacy.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.RequestType">
            <summary>
            Type of request that we want to issue on the transport
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.RequestType.Get">
            <summary>
            Request to get a resource
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.RequestType.Create">
            <summary>
            Request to create a resource
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.RequestType.Replace">
            <summary>
            Request to replace a resource
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.RequestType.Update">
            <summary>
            Request to update a resource
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.RequestType.Delete">
            <summary>
            Request to delete a resource
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Communications.Common.Transport.ResponseStatus">
            <summary>
            Different status of <see cref="T:Microsoft.Graph.Communications.Common.Transport.IGraphResponse`1" />.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.Ok">
            <summary>
            The request was successfully processed.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.Created">
            <summary>
            The request resource was successfully created.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.Accepted">
            <summary>
            The request was successfully accepted.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.NoContent">
            <summary>
            There was no content in the response.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.MultiStatus">
            <summary>
            The multi status response.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.BadRequest">
            <summary>
            The request was semantically/syntactically invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.Unauthorized">
            <summary>
            The request was not authorized by the callee.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.Forbidden">
            <summary>
            The request was forbidden.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.NotFound">
            <summary>
            The requested resource was not found.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.RequestTimeout">
            <summary>
            Client did not send a request within the time the server was expecting the request.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.Conflict">
            <summary>
            There was a conflict in processing the request.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.TooManyRequests">
            <summary>
            Too many requests were tried.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.InternalServerError">
            <summary>
            The request resulted in an internal server error.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.NotImplemented">
            <summary>
            The not implemented
            </summary>
        </member>
        <member name="F:Microsoft.Graph.Communications.Common.Transport.ResponseStatus.ServiceUnavailable">
            <summary>
            The server is temporarily unavailable.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.AdditionalDataExtensions">
            <summary>
            The identity set extensions
            </summary>
        </member>
        <member name="M:Microsoft.Graph.AdditionalDataExtensions.GetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            Gets the object using the key from additional data.
            </summary>
            <typeparam name="T">The expected type for the specified key.</typeparam>
            <param name="additionalData">The additional data.</param>
            <param name="key">The key.</param>
            <param name="default">The default value if value could not be parsed.</param>
            <returns>/// The converted value.</returns>
        </member>
        <member name="M:Microsoft.Graph.AdditionalDataExtensions.SetInAdditionalData(System.Object,System.String,System.Object)">
            <summary>
            Sets the object with given key in additional data.
            </summary>
            <param name="obj">The identity.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
    </members>
</doc>
